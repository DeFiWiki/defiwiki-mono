{"version":3,"sources":["wallet.js","logo.svg","views/ProtocolCard.jsx","App.js","reportWebVitals.js","index.js"],"names":["threeID","ThreeIdConnect","web3Modal","Web3Modal","network","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","getProvider","a","connect","ethProvider","enable","addresses","EthereumAuthProvider","getDidProvider","ProtocolCard","name","className","App","ceramic","Ceramic","createIdx","idx","IDX","window","authenticate","provider","resolver","KeyDidResolver","getResolver","ThreeIdResolver","did","DID","console","log","setDID","id","useState","protocols","setProtocols","onClick","Math","random","newProtocols","concat","map","protocol","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qiBAKaA,EAAU,IAAIC,IAEdC,EAAY,IAAIC,IAAU,CACnCC,QAAS,UACTC,eAAe,EACfC,gBAAiB,CACbC,cAAe,CACXC,QAASC,IACTC,QAAS,CACLC,SAAU,wCAMnB,SAAeC,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACuBX,EAAUY,UADjC,cACGC,EADH,gBAEqBA,EAAYC,SAFjC,cAEGC,EAFH,gBAGGjB,EAAQc,QAAQ,IAAII,IAAqBH,EAAaE,EAAU,KAHnE,gCAIIjB,EAAQmB,kBAJZ,4C,sBCpBQ,I,OAAA,I,iBCEA,SAASC,EAAT,GAAiC,IAATC,EAAQ,EAARA,KAEnC,OACI,qBAAKC,UAAU,OAAf,SACKD,I,aCiFEE,MAnEf,WAQE,IAEMC,EAAU,IAAIC,IAFJ,0BAKVC,EAAY,SAACF,GACjB,IAAMG,EAAM,IAAIC,IAAI,CAAEJ,YAEtB,OADAK,OAAOF,IAAMA,EACNA,GAGHG,EAAY,uCAAG,kCAAAjB,EAAA,sEACID,IADJ,cACbmB,EADa,OAEbC,EAFa,2BAGIC,IAAeC,eACfC,IAAgBD,YAAYV,IAE7CY,EAAM,IAAIC,MAAI,CAAEN,WAAUC,aAChCM,QAAQC,IAAIH,GAPO,SAQbA,EAAIN,eARS,cASnBQ,QAAQC,IAAIH,GATO,UAUbZ,EAAQgB,OAAOJ,GAVF,eAWnBE,QAAQC,IAAIH,GACNT,EAAMD,EAAUF,GAZH,kBAcZG,EAAIc,IAdQ,4CAAH,qDAnBL,EAsCqBC,mBAAS,CAAE,KAAM,QAtCtC,mBAsCNC,EAtCM,KAsCKC,EAtCL,KAgDb,OACE,qBAAKtB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,2CACA,cAAC,IAAD,CAAQuB,QAZM,WAClB,IAAMxB,EAAOyB,KAAKC,SAClBT,QAAQC,IAAR,gBAAqBlB,IAErB,IAAM2B,EAAeL,EAAUM,OAAO,CAAC5B,IACvCuB,EAAaI,IAOT,4BAEA,qBAAK1B,UAAU,kBAAf,SAEIqB,EAAUO,KAAI,SAASC,EAAUC,GAC/B,OAAO,cAAChC,EAAD,CAAcC,KAAM8B,SAIjC,cAAC,IAAD,CAAQN,QAASf,EAAjB,kCCrEOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cc35cc84.chunk.js","sourcesContent":["import WalletConnectProvider from '@walletconnect/web3-provider'\r\nimport { ThreeIdConnect, EthereumAuthProvider } from '@3id/connect'\r\nimport Web3Modal from 'web3modal'\r\n\r\n// @ts-ignore\r\nexport const threeID = new ThreeIdConnect()\r\n\r\nexport const web3Modal = new Web3Modal({\r\n    network: 'mainnet',\r\n    cacheProvider: true,\r\n    providerOptions: {\r\n        walletconnect: {\r\n            package: WalletConnectProvider,\r\n            options: {\r\n                infuraId: 'e87f83fb85bf4aa09bdf6605ebe144b7',\r\n            },\r\n        },\r\n    },\r\n})\r\n\r\nexport async function getProvider() {\r\n    const ethProvider = await web3Modal.connect()\r\n    const addresses = await ethProvider.enable()\r\n    await threeID.connect(new EthereumAuthProvider(ethProvider, addresses[0]))\r\n    return threeID.getDidProvider()\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nexport default function ProtocolCard({ name }) {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            {name}\r\n        </div>\r\n    )\r\n\r\n};","import React, { useState } from \"react\";\r\nimport Ceramic from \"@ceramicnetwork/http-client\";\r\n\r\nimport { DID } from 'dids';\r\nimport KeyDidResolver from 'key-did-resolver';\r\nimport ThreeIdResolver from \"@ceramicnetwork/3id-did-resolver\";\r\n\r\nimport { getProvider } from \"./wallet\";\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { Button } from \"antd\";\r\nimport ProtocolCard from './views/ProtocolCard';\r\nimport { IDX } from \"@ceramicstudio/idx\";\r\n  \r\n\r\n// TODO: refactor out web3 stuff\r\nconst INFURA_KEY = \"6136ff8f36ce4d83a44157cc7b2e46e2\";\r\n\r\nfunction App() {\r\n\r\n  /* --------------------------\r\n   *   Ceramic Initialization\r\n   * --------------------------\r\n   */\r\n\r\n  // TODO: add configuration for local vs remote\r\n  const API_URL = \"https://localhost:7007\";\r\n  // const API_URL = \"https://ceramic-clay.3boxlabs.com\";\r\n  const ceramic = new Ceramic(API_URL); \r\n  // const ceramic = new CeramicClient(API_URL); \r\n\r\n  const createIdx = (ceramic) => {\r\n    const idx = new IDX({ ceramic });\r\n    window.idx = idx;\r\n    return idx;\r\n  }\r\n\r\n  const authenticate = async () => {\r\n    const provider = await getProvider();\r\n    const resolver = { \r\n                        ...KeyDidResolver.getResolver(), \r\n                        ...ThreeIdResolver.getResolver(ceramic)\r\n                     };\r\n    const did = new DID({ provider, resolver });\r\n    console.log(did);\r\n    await did.authenticate();\r\n    console.log(did);\r\n    await ceramic.setDID(did);\r\n    console.log(did);\r\n    const idx = createIdx(ceramic);\r\n    // window.did = did;\r\n    return idx.id;\r\n  }\r\n\r\n\r\n  // TODO: Fetch the list of protocols from ceramic\r\n  const [protocols, setProtocols] = useState([ \"hi\", \"bye\" ]);\r\n\r\n  const addProtocol = () => {\r\n    const name = Math.random();\r\n    console.log(`Name: ${name}`);\r\n\r\n    const newProtocols = protocols.concat([name]);\r\n    setProtocols(newProtocols)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Protocols</h1>\r\n        <Button onClick={addProtocol}> Add Protocol </Button>\r\n      \r\n        <div className=\"container--grid\">\r\n          {\r\n            protocols.map(function(protocol, i) {\r\n              return <ProtocolCard name={protocol} />\r\n            })\r\n          }\r\n        </div>\r\n        <Button onClick={authenticate}>Connect Wallet</Button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}