{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapDocument = void 0;\n\nvar stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\n\nvar legacyResolver_1 = __importDefault(require(\"./legacyResolver\"));\n\nvar u8a = __importStar(require(\"uint8arrays\"));\n\nvar streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nvar cids_1 = __importDefault(require(\"cids\"));\n\nvar DID_LD_JSON = 'application/did+ld+json';\nvar DID_JSON = 'application/did+json';\n\nvar isLegacyDid = function isLegacyDid(didId) {\n  try {\n    new cids_1.default(didId);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar formatTime = function formatTime(timestamp) {\n  return new Date(timestamp * 1000).toISOString().split('.')[0] + 'Z';\n};\n\nfunction wrapDocument(content, did) {\n  if (!(content && content.publicKeys)) return null;\n  var startDoc = {\n    id: did,\n    verificationMethod: [],\n    authentication: [],\n    keyAgreement: []\n  };\n  return Object.entries(content.publicKeys).reduce(function (diddoc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        keyName = _ref2[0],\n        keyValue = _ref2[1];\n\n    var keyBuf = u8a.fromString(keyValue.slice(1), 'base58btc');\n    var entry = {\n      id: \"\".concat(did, \"#\").concat(keyName),\n      type: '',\n      controller: did,\n      publicKeyBase58: u8a.toString(keyBuf.slice(2), 'base58btc')\n    };\n\n    if (keyBuf[0] === 0xe7) {\n      entry.type = 'EcdsaSecp256k1Signature2019';\n      diddoc.verificationMethod.push(entry);\n      diddoc.authentication.push(entry);\n    } else if (keyBuf[0] === 0xec) {\n      entry.type = 'X25519KeyAgreementKey2019';\n      diddoc.verificationMethod.push(entry);\n      diddoc.keyAgreement.push(entry);\n    }\n\n    return diddoc;\n  }, startDoc);\n}\n\nexports.wrapDocument = wrapDocument;\n\nfunction extractMetadata(requestedVersionState, latestVersionState) {\n  var _a;\n\n  var metadata = {};\n\n  var _ref3 = requestedVersionState.log.pop() || {},\n      updated = _ref3.timestamp,\n      versionId = _ref3.cid;\n\n  var _ref4 = latestVersionState.log.find(function (_ref5) {\n    var timestamp = _ref5.timestamp;\n    return timestamp > updated || !updated && timestamp;\n  }) || {},\n      nextUpdate = _ref4.timestamp,\n      nextVersionId = _ref4.cid;\n\n  var created = (_a = latestVersionState.log.find(function (_ref6) {\n    var timestamp = _ref6.timestamp;\n    return Boolean(timestamp);\n  })) === null || _a === void 0 ? void 0 : _a.timestamp;\n\n  if (created) {\n    metadata.created = formatTime(created);\n  }\n\n  if (updated) {\n    metadata.updated = formatTime(updated);\n  }\n\n  if (nextUpdate) {\n    metadata.nextUpdate = formatTime(nextUpdate);\n  }\n\n  if (versionId) {\n    metadata.versionId = requestedVersionState.log.length === 0 ? '0' : versionId === null || versionId === void 0 ? void 0 : versionId.toString();\n  }\n\n  if (nextVersionId) {\n    metadata.nextVersionId = nextVersionId.toString();\n  }\n\n  return metadata;\n}\n\nfunction getVersionInfo() {\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var versionId = query.split('&').find(function (e) {\n    return e.includes('versionId') || e.includes('version-id');\n  });\n  var versionTime = query.split('&').find(function (e) {\n    return e.includes('versionTime');\n  });\n  return {\n    commit: versionId ? versionId.split('=')[1] : undefined,\n    timestamp: versionTime ? Math.floor(new Date(versionTime.split('=')[1]).getTime() / 1000) : undefined\n  };\n}\n\nvar legacyResolve = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ceramic, didId, verNfo) {\n    var legacyPublicKeys, metadata, streamid, didResult;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return legacyResolver_1.default(didId);\n\n          case 2:\n            legacyPublicKeys = _context.sent;\n            metadata = {\n              controllers: [legacyPublicKeys.keyDid],\n              family: '3id',\n              deterministic: true\n            };\n            _context.next = 6;\n            return stream_tile_1.TileDocument.create(ceramic, null, metadata, {\n              anchor: false,\n              publish: false\n            });\n\n          case 6:\n            streamid = _context.sent.id;\n            _context.next = 9;\n            return resolve(ceramic, streamid.toString(), verNfo, didId);\n\n          case 9:\n            didResult = _context.sent;\n\n            if (didResult.didDocument === null) {\n              didResult.didDocument = wrapDocument(legacyPublicKeys, \"did:3:\".concat(didId));\n            }\n\n            return _context.abrupt(\"return\", didResult);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function legacyResolve(_x, _x2, _x3) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar resolve = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ceramic, didId, verNfo, v03ID) {\n    var _a, streamId, commitId, query, resp, latestVersionState, commitIdStr, requestedVersionState, metadata, tile, content, document;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            streamId = streamid_1.StreamID.fromString(didId);\n            query = [{\n              streamId: streamId\n            }];\n\n            if (verNfo.commit) {\n              commitId = streamId.atCommit(verNfo.commit);\n              query.push({\n                streamId: commitId\n              });\n            } else if (verNfo.timestamp) {\n              query.push({\n                streamId: streamId,\n                atTime: verNfo.timestamp\n              });\n            }\n\n            _context2.next = 5;\n            return ceramic.multiQuery(query);\n\n          case 5:\n            resp = _context2.sent;\n            latestVersionState = resp[didId].state;\n            commitIdStr = (commitId === null || commitId === void 0 ? void 0 : commitId.toString()) || Object.keys(resp).find(function (k) {\n              return k !== didId;\n            });\n            requestedVersionState = ((_a = resp[commitIdStr]) === null || _a === void 0 ? void 0 : _a.state) || latestVersionState;\n            metadata = extractMetadata(requestedVersionState, latestVersionState);\n            tile = resp[commitIdStr || didId];\n\n            if (!(commitIdStr && !tile)) {\n              _context2.next = 13;\n              break;\n            }\n\n            throw new Error(\"No resolution for commit \".concat(commitIdStr));\n\n          case 13:\n            content = tile.content;\n            document = wrapDocument(content, \"did:3:\".concat(v03ID || didId));\n            return _context2.abrupt(\"return\", {\n              didResolutionMetadata: {\n                contentType: DID_JSON\n              },\n              didDocument: document,\n              didDocumentMetadata: metadata\n            });\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function resolve(_x4, _x5, _x6, _x7) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nexports.default = {\n  getResolver: function getResolver(ceramic) {\n    return {\n      '3': function () {\n        var _2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(did, parsed, resolver, options) {\n          var contentType, verNfo, didResult;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  contentType = options.accept || DID_JSON;\n                  _context3.prev = 1;\n                  verNfo = getVersionInfo(parsed.query);\n                  _context3.next = 5;\n                  return isLegacyDid(parsed.id) ? legacyResolve(ceramic, parsed.id, verNfo) : resolve(ceramic, parsed.id, verNfo);\n\n                case 5:\n                  didResult = _context3.sent;\n\n                  if (contentType === DID_LD_JSON) {\n                    didResult.didDocument['@context'] = 'https://www.w3.org/ns/did/v1';\n                    didResult.didResolutionMetadata.contentType = DID_LD_JSON;\n                  } else if (contentType !== DID_JSON) {\n                    didResult.didDocument = null;\n                    didResult.didDocumentMetadata = {};\n                    delete didResult.didResolutionMetadata.contentType;\n                    didResult.didResolutionMetadata.error = 'representationNotSupported';\n                  }\n\n                  return _context3.abrupt(\"return\", didResult);\n\n                case 10:\n                  _context3.prev = 10;\n                  _context3.t0 = _context3[\"catch\"](1);\n                  return _context3.abrupt(\"return\", {\n                    didResolutionMetadata: {\n                      error: 'invalidDid',\n                      message: _context3.t0.toString()\n                    },\n                    didDocument: null,\n                    didDocumentMetadata: {}\n                  });\n\n                case 13:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[1, 10]]);\n        }));\n\n        function _(_x8, _x9, _x10, _x11) {\n          return _2.apply(this, arguments);\n        }\n\n        return _;\n      }()\n    };\n  }\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapDocument = void 0;\nconst stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\nconst legacyResolver_1 = __importDefault(require(\"./legacyResolver\"));\nconst u8a = __importStar(require(\"uint8arrays\"));\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst cids_1 = __importDefault(require(\"cids\"));\nconst DID_LD_JSON = 'application/did+ld+json';\nconst DID_JSON = 'application/did+json';\nconst isLegacyDid = (didId) => {\n    try {\n        new cids_1.default(didId);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nconst formatTime = (timestamp) => {\n    return (new Date(timestamp * 1000)).toISOString().split('.')[0] + 'Z';\n};\nfunction wrapDocument(content, did) {\n    if (!(content && content.publicKeys))\n        return null;\n    const startDoc = {\n        id: did,\n        verificationMethod: [],\n        authentication: [],\n        keyAgreement: [],\n    };\n    return Object.entries(content.publicKeys).reduce((diddoc, [keyName, keyValue]) => {\n        const keyBuf = u8a.fromString(keyValue.slice(1), 'base58btc');\n        const entry = {\n            id: `${did}#${keyName}`,\n            type: '',\n            controller: did,\n            publicKeyBase58: u8a.toString(keyBuf.slice(2), 'base58btc')\n        };\n        if (keyBuf[0] === 0xe7) {\n            entry.type = 'EcdsaSecp256k1Signature2019';\n            diddoc.verificationMethod.push(entry);\n            diddoc.authentication.push(entry);\n        }\n        else if (keyBuf[0] === 0xec) {\n            entry.type = 'X25519KeyAgreementKey2019';\n            diddoc.verificationMethod.push(entry);\n            diddoc.keyAgreement.push(entry);\n        }\n        return diddoc;\n    }, startDoc);\n}\nexports.wrapDocument = wrapDocument;\nfunction extractMetadata(requestedVersionState, latestVersionState) {\n    var _a;\n    const metadata = {};\n    const { timestamp: updated, cid: versionId } = requestedVersionState.log.pop() || {};\n    const { timestamp: nextUpdate, cid: nextVersionId } = latestVersionState.log.find(({ timestamp }) => timestamp > updated || (!updated && timestamp)) || {};\n    const created = (_a = latestVersionState.log.find(({ timestamp }) => Boolean(timestamp))) === null || _a === void 0 ? void 0 : _a.timestamp;\n    if (created) {\n        metadata.created = formatTime(created);\n    }\n    if (updated) {\n        metadata.updated = formatTime(updated);\n    }\n    if (nextUpdate) {\n        metadata.nextUpdate = formatTime(nextUpdate);\n    }\n    if (versionId) {\n        metadata.versionId = requestedVersionState.log.length === 0 ? '0' : versionId === null || versionId === void 0 ? void 0 : versionId.toString();\n    }\n    if (nextVersionId) {\n        metadata.nextVersionId = nextVersionId.toString();\n    }\n    return metadata;\n}\nfunction getVersionInfo(query = '') {\n    const versionId = query.split('&').find(e => e.includes('versionId') || e.includes('version-id'));\n    const versionTime = query.split('&').find(e => e.includes('versionTime'));\n    return {\n        commit: versionId ? versionId.split('=')[1] : undefined,\n        timestamp: versionTime ? Math.floor((new Date(versionTime.split('=')[1])).getTime() / 1000) : undefined\n    };\n}\nconst legacyResolve = async (ceramic, didId, verNfo) => {\n    const legacyPublicKeys = await legacyResolver_1.default(didId);\n    const metadata = { controllers: [legacyPublicKeys.keyDid], family: '3id', deterministic: true };\n    const streamid = (await stream_tile_1.TileDocument.create(ceramic, null, metadata, { anchor: false, publish: false })).id;\n    const didResult = await resolve(ceramic, streamid.toString(), verNfo, didId);\n    if (didResult.didDocument === null) {\n        didResult.didDocument = wrapDocument(legacyPublicKeys, `did:3:${didId}`);\n    }\n    return didResult;\n};\nconst resolve = async (ceramic, didId, verNfo, v03ID) => {\n    var _a;\n    const streamId = streamid_1.StreamID.fromString(didId);\n    let commitId;\n    const query = [{ streamId }];\n    if (verNfo.commit) {\n        commitId = streamId.atCommit(verNfo.commit);\n        query.push({ streamId: commitId });\n    }\n    else if (verNfo.timestamp) {\n        query.push({\n            streamId,\n            atTime: verNfo.timestamp\n        });\n    }\n    const resp = await ceramic.multiQuery(query);\n    const latestVersionState = resp[didId].state;\n    const commitIdStr = (commitId === null || commitId === void 0 ? void 0 : commitId.toString()) || Object.keys(resp).find(k => k !== didId);\n    const requestedVersionState = ((_a = resp[commitIdStr]) === null || _a === void 0 ? void 0 : _a.state) || latestVersionState;\n    const metadata = extractMetadata(requestedVersionState, latestVersionState);\n    const tile = resp[commitIdStr || didId];\n    if (commitIdStr && !tile) {\n        throw new Error(`No resolution for commit ${commitIdStr}`);\n    }\n    const content = tile.content;\n    const document = wrapDocument(content, `did:3:${v03ID || didId}`);\n    return {\n        didResolutionMetadata: { contentType: DID_JSON },\n        didDocument: document,\n        didDocumentMetadata: metadata\n    };\n};\nexports.default = {\n    getResolver: (ceramic) => ({\n        '3': async (did, parsed, resolver, options) => {\n            const contentType = options.accept || DID_JSON;\n            try {\n                const verNfo = getVersionInfo(parsed.query);\n                const didResult = await (isLegacyDid(parsed.id) ? legacyResolve(ceramic, parsed.id, verNfo) : resolve(ceramic, parsed.id, verNfo));\n                if (contentType === DID_LD_JSON) {\n                    didResult.didDocument['@context'] = 'https://www.w3.org/ns/did/v1';\n                    didResult.didResolutionMetadata.contentType = DID_LD_JSON;\n                }\n                else if (contentType !== DID_JSON) {\n                    didResult.didDocument = null;\n                    didResult.didDocumentMetadata = {};\n                    delete didResult.didResolutionMetadata.contentType;\n                    didResult.didResolutionMetadata.error = 'representationNotSupported';\n                }\n                return didResult;\n            }\n            catch (e) {\n                return {\n                    didResolutionMetadata: {\n                        error: 'invalidDid',\n                        message: e.toString()\n                    },\n                    didDocument: null,\n                    didDocumentMetadata: {}\n                };\n            }\n        }\n    })\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}