{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _slicedToArray = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _type, _cid;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamID = void 0;\n\nvar cids_1 = __importDefault(require(\"cids\"));\n\nvar multibase_1 = __importDefault(require(\"multibase\"));\n\nvar varint_1 = __importDefault(require(\"varint\"));\n\nvar concat_1 = __importDefault(require(\"uint8arrays/concat\"));\n\nvar to_string_1 = __importDefault(require(\"uint8arrays/to-string\"));\n\nvar constants_1 = require(\"./constants\");\n\nvar reading_bytes_1 = require(\"./reading-bytes\");\n\nvar typescript_memoize_1 = require(\"typescript-memoize\");\n\nvar commit_id_1 = require(\"./commit-id\");\n\nvar stream_type_1 = require(\"./stream-type\");\n\nfunction fromBytes(bytes) {\n  var _reading_bytes_1$read = reading_bytes_1.readVarint(bytes),\n      _reading_bytes_1$read2 = _slicedToArray(_reading_bytes_1$read, 2),\n      streamCodec = _reading_bytes_1$read2[0],\n      streamCodecRemainder = _reading_bytes_1$read2[1];\n\n  if (streamCodec !== constants_1.STREAMID_CODEC) throw new Error('fromBytes: invalid streamid, does not include streamid codec');\n\n  var _reading_bytes_1$read3 = reading_bytes_1.readVarint(streamCodecRemainder),\n      _reading_bytes_1$read4 = _slicedToArray(_reading_bytes_1$read3, 2),\n      type = _reading_bytes_1$read4[0],\n      streamTypeRemainder = _reading_bytes_1$read4[1];\n\n  var _reading_bytes_1$read5 = reading_bytes_1.readCid(streamTypeRemainder),\n      _reading_bytes_1$read6 = _slicedToArray(_reading_bytes_1$read5, 2),\n      cid = _reading_bytes_1$read6[0],\n      cidRemainder = _reading_bytes_1$read6[1];\n\n  if (cidRemainder.length > 0) {\n    throw new Error(\"Invalid StreamID: contains commit\");\n  }\n\n  return new StreamID(type, cid);\n}\n\nfunction fromString(input) {\n  var protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');\n  var commitFree = protocolFree.includes('commit') ? protocolFree.split('?')[0] : protocolFree;\n  var bytes = multibase_1.default.decode(commitFree);\n  return fromBytes(bytes);\n}\n\nvar TAG = Symbol.for('@ceramicnetwork/streamid/StreamID');\n\nvar StreamID = /*#__PURE__*/function () {\n  function StreamID(type, cid) {\n    _classCallCheck(this, StreamID);\n\n    this._tag = TAG;\n\n    _type.set(this, void 0);\n\n    _cid.set(this, void 0);\n\n    if (!(type || type === 0)) throw new Error('constructor: type required');\n    if (!cid) throw new Error('constructor: cid required');\n\n    __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);\n\n    __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);\n  }\n\n  _createClass(StreamID, [{\n    key: \"type\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _type);\n    }\n  }, {\n    key: \"typeName\",\n    get: function get() {\n      return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));\n    }\n  }, {\n    key: \"cid\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _cid);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      var codec = varint_1.default.encode(constants_1.STREAMID_CODEC);\n      var type = varint_1.default.encode(this.type);\n      return concat_1.default([codec, type, this.cid.bytes]);\n    }\n  }, {\n    key: \"baseID\",\n    get: function get() {\n      return new StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));\n    }\n  }, {\n    key: \"atCommit\",\n    value: function atCommit(commit) {\n      return new commit_id_1.CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (StreamID.isInstance(other)) {\n        return this.type === other.type && this.cid.equals(other.cid);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));\n    }\n  }, {\n    key: \"toUrl\",\n    value: function toUrl() {\n      return \"ceramic://\".concat(this.toString());\n    }\n  }, {\n    key: (_type = new WeakMap(), _cid = new WeakMap(), Symbol.for('nodejs.util.inspect.custom')),\n    value: function value() {\n      return \"StreamID(\".concat(this.toString(), \")\");\n    }\n  }, {\n    key: Symbol.toPrimitive,\n    value: function value() {\n      return this.toString();\n    }\n  }], [{\n    key: \"isInstance\",\n    value: function isInstance(instance) {\n      return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;\n    }\n  }]);\n\n  return StreamID;\n}();\n\nStreamID.fromBytes = fromBytes;\nStreamID.fromString = fromString;\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [])], StreamID.prototype, \"typeName\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Uint8Array), __metadata(\"design:paramtypes\", [])], StreamID.prototype, \"bytes\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", StreamID), __metadata(\"design:paramtypes\", [])], StreamID.prototype, \"baseID\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", String)], StreamID.prototype, \"toString\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", String)], StreamID.prototype, \"toUrl\", null);\n\nexports.StreamID = StreamID;","map":{"version":3,"sources":["../src/stream-id.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _type, _cid;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamID = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst multibase_1 = __importDefault(require(\"multibase\"));\nconst varint_1 = __importDefault(require(\"varint\"));\nconst concat_1 = __importDefault(require(\"uint8arrays/concat\"));\nconst to_string_1 = __importDefault(require(\"uint8arrays/to-string\"));\nconst constants_1 = require(\"./constants\");\nconst reading_bytes_1 = require(\"./reading-bytes\");\nconst typescript_memoize_1 = require(\"typescript-memoize\");\nconst commit_id_1 = require(\"./commit-id\");\nconst stream_type_1 = require(\"./stream-type\");\nfunction fromBytes(bytes) {\n    const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);\n    if (streamCodec !== constants_1.STREAMID_CODEC)\n        throw new Error('fromBytes: invalid streamid, does not include streamid codec');\n    const [type, streamTypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);\n    const [cid, cidRemainder] = reading_bytes_1.readCid(streamTypeRemainder);\n    if (cidRemainder.length > 0) {\n        throw new Error(`Invalid StreamID: contains commit`);\n    }\n    return new StreamID(type, cid);\n}\nfunction fromString(input) {\n    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');\n    const commitFree = protocolFree.includes('commit') ? protocolFree.split('?')[0] : protocolFree;\n    const bytes = multibase_1.default.decode(commitFree);\n    return fromBytes(bytes);\n}\nconst TAG = Symbol.for('@ceramicnetwork/streamid/StreamID');\nclass StreamID {\n    constructor(type, cid) {\n        this._tag = TAG;\n        _type.set(this, void 0);\n        _cid.set(this, void 0);\n        if (!(type || type === 0))\n            throw new Error('constructor: type required');\n        if (!cid)\n            throw new Error('constructor: cid required');\n        __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);\n        __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);\n    }\n    static isInstance(instance) {\n        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;\n    }\n    get type() {\n        return __classPrivateFieldGet(this, _type);\n    }\n    get typeName() {\n        return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));\n    }\n    get cid() {\n        return __classPrivateFieldGet(this, _cid);\n    }\n    get bytes() {\n        const codec = varint_1.default.encode(constants_1.STREAMID_CODEC);\n        const type = varint_1.default.encode(this.type);\n        return concat_1.default([codec, type, this.cid.bytes]);\n    }\n    get baseID() {\n        return new StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));\n    }\n    atCommit(commit) {\n        return new commit_id_1.CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);\n    }\n    equals(other) {\n        if (StreamID.isInstance(other)) {\n            return this.type === other.type && this.cid.equals(other.cid);\n        }\n        else {\n            return false;\n        }\n    }\n    toString() {\n        return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));\n    }\n    toUrl() {\n        return `ceramic://${this.toString()}`;\n    }\n    [(_type = new WeakMap(), _cid = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {\n        return `StreamID(${this.toString()})`;\n    }\n    [Symbol.toPrimitive]() {\n        return this.toString();\n    }\n}\nStreamID.fromBytes = fromBytes;\nStreamID.fromString = fromString;\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [])\n], StreamID.prototype, \"typeName\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Uint8Array),\n    __metadata(\"design:paramtypes\", [])\n], StreamID.prototype, \"bytes\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", StreamID),\n    __metadata(\"design:paramtypes\", [])\n], StreamID.prototype, \"baseID\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], StreamID.prototype, \"toString\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], StreamID.prototype, \"toUrl\", null);\nexports.StreamID = StreamID;\n//# sourceMappingURL=stream-id.js.map"]},"metadata":{},"sourceType":"script"}