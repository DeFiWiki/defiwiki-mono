{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCid = exports.readVarint = void 0;\n\nvar cids_1 = __importDefault(require(\"cids\"));\n\nvar varint_1 = __importDefault(require(\"varint\"));\n\nfunction readVarint(bytes) {\n  var value = varint_1.default.decode(bytes);\n  var readLength = varint_1.default.decode.bytes;\n  var remainder = bytes.slice(readLength);\n  return [value, remainder, readLength];\n}\n\nexports.readVarint = readVarint;\n\nfunction isCidVersion(input) {\n  return input === 0 || input === 1;\n}\n\nfunction readCid(bytes) {\n  var _readVarint = readVarint(bytes),\n      _readVarint2 = _slicedToArray(_readVarint, 2),\n      cidVersion = _readVarint2[0],\n      cidVersionRemainder = _readVarint2[1];\n\n  if (!isCidVersion(cidVersion)) {\n    throw new Error(\"Unknown CID version \".concat(cidVersion));\n  }\n\n  var _readVarint3 = readVarint(cidVersionRemainder),\n      _readVarint4 = _slicedToArray(_readVarint3, 2),\n      codec = _readVarint4[0],\n      codecRemainder = _readVarint4[1];\n\n  var _readVarint5 = readVarint(codecRemainder),\n      _readVarint6 = _slicedToArray(_readVarint5, 3),\n      mhCodecRemainder = _readVarint6[1],\n      mhCodecLength = _readVarint6[2];\n\n  var _readVarint7 = readVarint(mhCodecRemainder),\n      _readVarint8 = _slicedToArray(_readVarint7, 3),\n      mhLength = _readVarint8[0],\n      mhLengthLength = _readVarint8[2];\n\n  var multihashBytes = codecRemainder.slice(0, mhCodecLength + mhLengthLength + mhLength);\n  var multihashBytesRemainder = codecRemainder.slice(mhCodecLength + mhLengthLength + mhLength);\n  return [new cids_1.default(cidVersion, codec, multihashBytes), multihashBytesRemainder];\n}\n\nexports.readCid = readCid;","map":{"version":3,"sources":["../src/reading-bytes.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,SAAgB,UAAhB,CAA2B,KAA3B,EAA4C;AAC1C,MAAM,KAAK,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAd,CAAd;AACA,MAAM,UAAU,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAjC;AACA,MAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,UAAZ,CAAlB;AACA,SAAO,CAAC,KAAD,EAAQ,SAAR,EAAmB,UAAnB,CAAP;AACD;;AALD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAOA,SAAS,YAAT,CAAsB,KAAtB,EAAmC;AACjC,SAAO,KAAK,KAAK,CAAV,IAAe,KAAK,KAAK,CAAhC;AACD;;AAED,SAAgB,OAAhB,CAAwB,KAAxB,EAAyC;AAAA,oBACG,UAAU,CAAC,KAAD,CADb;AAAA;AAAA,MAChC,UADgC;AAAA,MACpB,mBADoB;;AAEvC,MAAI,CAAC,YAAY,CAAC,UAAD,CAAjB,EAA+B;AAC7B,UAAM,IAAI,KAAJ,+BAAiC,UAAjC,EAAN;AACD;;AAJsC,qBAKP,UAAU,CAAC,mBAAD,CALH;AAAA;AAAA,MAKhC,KALgC;AAAA,MAKzB,cALyB;;AAAA,qBAMK,UAAU,CAAC,cAAD,CANf;AAAA;AAAA,MAM9B,gBAN8B;AAAA,MAMZ,aANY;;AAAA,qBAOF,UAAU,CAAC,gBAAD,CAPR;AAAA;AAAA,MAOhC,QAPgC;AAAA,MAOpB,cAPoB;;AAQvC,MAAM,cAAc,GAAG,cAAc,CAAC,KAAf,CAAqB,CAArB,EAAwB,aAAa,GAAG,cAAhB,GAAiC,QAAzD,CAAvB;AACA,MAAM,uBAAuB,GAAG,cAAc,CAAC,KAAf,CAAqB,aAAa,GAAG,cAAhB,GAAiC,QAAtD,CAAhC;AACA,SAAO,CAAC,IAAI,MAAA,CAAA,OAAJ,CAAQ,UAAR,EAAoB,KAApB,EAA2B,cAA3B,CAAD,EAA6C,uBAA7C,CAAP;AACD;;AAXD,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readCid = exports.readVarint = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst varint_1 = __importDefault(require(\"varint\"));\nfunction readVarint(bytes) {\n    const value = varint_1.default.decode(bytes);\n    const readLength = varint_1.default.decode.bytes;\n    const remainder = bytes.slice(readLength);\n    return [value, remainder, readLength];\n}\nexports.readVarint = readVarint;\nfunction isCidVersion(input) {\n    return input === 0 || input === 1;\n}\nfunction readCid(bytes) {\n    const [cidVersion, cidVersionRemainder] = readVarint(bytes);\n    if (!isCidVersion(cidVersion)) {\n        throw new Error(`Unknown CID version ${cidVersion}`);\n    }\n    const [codec, codecRemainder] = readVarint(cidVersionRemainder);\n    const [, mhCodecRemainder, mhCodecLength] = readVarint(codecRemainder);\n    const [mhLength, , mhLengthLength] = readVarint(mhCodecRemainder);\n    const multihashBytes = codecRemainder.slice(0, mhCodecLength + mhLengthLength + mhLength);\n    const multihashBytesRemainder = codecRemainder.slice(mhCodecLength + mhLengthLength + mhLength);\n    return [new cids_1.default(cidVersion, codec, multihashBytes), multihashBytesRemainder];\n}\nexports.readCid = readCid;\n//# sourceMappingURL=reading-bytes.js.map"]},"metadata":{},"sourceType":"script"}