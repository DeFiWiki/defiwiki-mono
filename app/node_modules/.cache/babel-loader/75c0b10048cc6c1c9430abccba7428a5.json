{"ast":null,"code":"var _jsxFileName = \"C:\\\\not-sync\\\\git2\\\\defiwiki-mono\\\\app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Ceramic from \"@ceramicnetwork/http-client\";\nimport { DID } from 'dids';\nimport KeyDidResolver from 'key-did-resolver';\nimport ThreeIdResolver from \"@ceramicnetwork/3id-did-resolver\";\nimport { getProvider } from \"./wallet\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Button } from \"antd\";\nimport ProtocolCard from './views/ProtocolCard';\nimport { IDX } from \"@ceramicstudio/idx\"; // TODO: refactor out web3 stuff\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INFURA_KEY = \"6136ff8f36ce4d83a44157cc7b2e46e2\";\n\nfunction App() {\n  _s();\n\n  /* --------------------------\r\n   *   Ceramic Initialization\r\n   * --------------------------\r\n   */\n  // TODO: add configuration for local vs remote\n  const API_URL = \"https://localhost:7007\"; // const API_URL = \"https://ceramic-clay.3boxlabs.com\";\n\n  const ceramic = new Ceramic(API_URL); // const ceramic = new CeramicClient(API_URL); \n\n  const createIdx = ceramic => {\n    const idx = new IDX({\n      ceramic\n    });\n    window.idx = idx;\n    return idx;\n  };\n\n  const authenticate = async () => {\n    const provider = await getProvider();\n    const resolver = { ...KeyDidResolver.getResolver(),\n      ...ThreeIdResolver.getResolver(ceramic)\n    };\n    const did = new DID({\n      provider,\n      resolver\n    });\n    console.log(did);\n    await did.authenticate();\n    console.log(did);\n    await ceramic.setDID(did);\n    console.log(did);\n    const idx = createIdx(ceramic); // window.did = did;\n\n    return idx.id;\n  }; // TODO: Fetch the list of protocols from ceramic\n\n\n  const [protocols, setProtocols] = useState([\"hi\", \"bye\"]);\n\n  const addProtocol = () => {\n    const name = Math.random();\n    console.log(`Name: ${name}`);\n    const newProtocols = protocols.concat([name]);\n    setProtocols(newProtocols);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Protocols\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: addProtocol,\n        children: \" Add Protocol \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container--grid\",\n        children: protocols.map(function (protocol, i) {\n          return /*#__PURE__*/_jsxDEV(ProtocolCard, {\n            name: protocol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: authenticate,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Dwc3A8DnB9BHc5CBVVVV/Peh+k0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/not-sync/git2/defiwiki-mono/app/src/App.js"],"names":["React","useState","Ceramic","DID","KeyDidResolver","ThreeIdResolver","getProvider","Button","ProtocolCard","IDX","INFURA_KEY","App","API_URL","ceramic","createIdx","idx","window","authenticate","provider","resolver","getResolver","did","console","log","setDID","id","protocols","setProtocols","addProtocol","name","Math","random","newProtocols","concat","map","protocol","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,6BAApB;AAEA,SAASC,GAAT,QAAoB,MAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,SAASC,WAAT,QAA4B,UAA5B;;AAGA,OAAO,WAAP;AAEA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,SAASC,GAAT,QAAoB,oBAApB,C,CAGA;;;AACA,MAAMC,UAAU,GAAG,kCAAnB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACF;AACA;AACA;AAEE;AACA,QAAMC,OAAO,GAAG,wBAAhB,CARa,CASb;;AACA,QAAMC,OAAO,GAAG,IAAIX,OAAJ,CAAYU,OAAZ,CAAhB,CAVa,CAWb;;AAEA,QAAME,SAAS,GAAID,OAAD,IAAa;AAC7B,UAAME,GAAG,GAAG,IAAIN,GAAJ,CAAQ;AAAEI,MAAAA;AAAF,KAAR,CAAZ;AACAG,IAAAA,MAAM,CAACD,GAAP,GAAaA,GAAb;AACA,WAAOA,GAAP;AACD,GAJD;;AAMA,QAAME,YAAY,GAAG,YAAY;AAC/B,UAAMC,QAAQ,GAAG,MAAMZ,WAAW,EAAlC;AACA,UAAMa,QAAQ,GAAG,EACG,GAAGf,cAAc,CAACgB,WAAf,EADN;AAEG,SAAGf,eAAe,CAACe,WAAhB,CAA4BP,OAA5B;AAFN,KAAjB;AAIA,UAAMQ,GAAG,GAAG,IAAIlB,GAAJ,CAAQ;AAAEe,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAR,CAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMA,GAAG,CAACJ,YAAJ,EAAN;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMR,OAAO,CAACW,MAAR,CAAeH,GAAf,CAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMN,GAAG,GAAGD,SAAS,CAACD,OAAD,CAArB,CAZ+B,CAa/B;;AACA,WAAOE,GAAG,CAACU,EAAX;AACD,GAfD,CAnBa,CAqCb;;;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1B,QAAQ,CAAC,CAAE,IAAF,EAAQ,KAAR,CAAD,CAA1C;;AAEA,QAAM2B,WAAW,GAAG,MAAM;AACxB,UAAMC,IAAI,GAAGC,IAAI,CAACC,MAAL,EAAb;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQM,IAAK,EAA1B;AAEA,UAAMG,YAAY,GAAGN,SAAS,CAACO,MAAV,CAAiB,CAACJ,IAAD,CAAjB,CAArB;AACAF,IAAAA,YAAY,CAACK,YAAD,CAAZ;AACD,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEJ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBAEIF,SAAS,CAACQ,GAAV,CAAc,UAASC,QAAT,EAAmBC,CAAnB,EAAsB;AAClC,8BAAO,QAAC,YAAD;AAAc,YAAA,IAAI,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFD;AAFJ;AAAA;AAAA;AAAA;AAAA,cAJF,eAWE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAElB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAjEQN,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Ceramic from \"@ceramicnetwork/http-client\";\r\n\r\nimport { DID } from 'dids';\r\nimport KeyDidResolver from 'key-did-resolver';\r\nimport ThreeIdResolver from \"@ceramicnetwork/3id-did-resolver\";\r\n\r\nimport { getProvider } from \"./wallet\";\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { Button } from \"antd\";\r\nimport ProtocolCard from './views/ProtocolCard';\r\nimport { IDX } from \"@ceramicstudio/idx\";\r\n  \r\n\r\n// TODO: refactor out web3 stuff\r\nconst INFURA_KEY = \"6136ff8f36ce4d83a44157cc7b2e46e2\";\r\n\r\nfunction App() {\r\n\r\n  /* --------------------------\r\n   *   Ceramic Initialization\r\n   * --------------------------\r\n   */\r\n\r\n  // TODO: add configuration for local vs remote\r\n  const API_URL = \"https://localhost:7007\";\r\n  // const API_URL = \"https://ceramic-clay.3boxlabs.com\";\r\n  const ceramic = new Ceramic(API_URL); \r\n  // const ceramic = new CeramicClient(API_URL); \r\n\r\n  const createIdx = (ceramic) => {\r\n    const idx = new IDX({ ceramic });\r\n    window.idx = idx;\r\n    return idx;\r\n  }\r\n\r\n  const authenticate = async () => {\r\n    const provider = await getProvider();\r\n    const resolver = { \r\n                        ...KeyDidResolver.getResolver(), \r\n                        ...ThreeIdResolver.getResolver(ceramic)\r\n                     };\r\n    const did = new DID({ provider, resolver });\r\n    console.log(did);\r\n    await did.authenticate();\r\n    console.log(did);\r\n    await ceramic.setDID(did);\r\n    console.log(did);\r\n    const idx = createIdx(ceramic);\r\n    // window.did = did;\r\n    return idx.id;\r\n  }\r\n\r\n\r\n  // TODO: Fetch the list of protocols from ceramic\r\n  const [protocols, setProtocols] = useState([ \"hi\", \"bye\" ]);\r\n\r\n  const addProtocol = () => {\r\n    const name = Math.random();\r\n    console.log(`Name: ${name}`);\r\n\r\n    const newProtocols = protocols.concat([name]);\r\n    setProtocols(newProtocols)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Protocols</h1>\r\n        <Button onClick={addProtocol}> Add Protocol </Button>\r\n      \r\n        <div className=\"container--grid\">\r\n          {\r\n            protocols.map(function(protocol, i) {\r\n              return <ProtocolCard name={protocol} />\r\n            })\r\n          }\r\n        </div>\r\n        <Button onClick={authenticate}>Connect Wallet</Button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}