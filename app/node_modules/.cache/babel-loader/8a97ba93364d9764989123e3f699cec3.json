{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar varint_1 = __importDefault(require(\"varint\"));\n\nvar multibase_1 = __importDefault(require(\"multibase\"));\n\nvar secp256k1 = __importStar(require(\"./secp256k1\"));\n\nvar ed25519 = __importStar(require(\"./ed25519\"));\n\nvar DID_LD_JSON = 'application/did+ld+json';\nvar DID_JSON = 'application/did+json';\nvar prefixToDriverMap = {\n  0xE7: secp256k1,\n  0xED: ed25519\n};\nexports.default = {\n  getResolver: function getResolver() {\n    return {\n      'key': function () {\n        var _key = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(did, parsed, r, options) {\n          var contentType, response, multicodecPubKey, keyType, pubKeyBytes, doc;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  contentType = options.accept || DID_JSON;\n                  response = {\n                    didResolutionMetadata: {\n                      contentType: contentType\n                    },\n                    didDocument: null,\n                    didDocumentMetadata: {}\n                  };\n                  _context.prev = 2;\n                  multicodecPubKey = multibase_1.default.decode(parsed.id);\n                  keyType = varint_1.default.decode(multicodecPubKey);\n                  pubKeyBytes = multicodecPubKey.slice(varint_1.default.decode.bytes);\n                  _context.next = 8;\n                  return prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);\n\n                case 8:\n                  doc = _context.sent;\n\n                  if (contentType === DID_LD_JSON) {\n                    doc['@context'] = 'https://w3id.org/did/v1', response.didDocument = doc;\n                  } else if (contentType === DID_JSON) {\n                    response.didDocument = doc;\n                  } else {\n                    delete response.didResolutionMetadata.contentType;\n                    response.didResolutionMetadata.error = 'representationNotSupported';\n                  }\n\n                  _context.next = 16;\n                  break;\n\n                case 12:\n                  _context.prev = 12;\n                  _context.t0 = _context[\"catch\"](2);\n                  response.didResolutionMetadata.error = 'invalidDid';\n                  response.didResolutionMetadata.message = _context.t0.toString();\n\n                case 16:\n                  return _context.abrupt(\"return\", response);\n\n                case 17:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[2, 12]]);\n        }));\n\n        function key(_x, _x2, _x3, _x4) {\n          return _key.apply(this, arguments);\n        }\n\n        return key;\n      }()\n    };\n  }\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AASA,IAAA,SAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,IAAM,WAAW,GAAG,yBAApB;AACA,IAAM,QAAQ,GAAG,sBAAjB;AAEA,IAAM,iBAAiB,GAAQ;AAC7B,QAAM,SADuB;AAE7B,QAAM;AAFuB,CAA/B;AAKA,OAAA,CAAA,OAAA,GAAe;AACb,EAAA,WAAW,EAAE;AAAA,WAAyB;AACpC;AAAA,4EAAO,iBAAO,GAAP,EAAoB,MAApB,EAAuC,CAAvC,EAAoD,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,kBAAA,WADD,GACe,OAAO,CAAC,MAAR,IAAkB,QADjC;AAEC,kBAAA,QAFD,GAEiC;AACpC,oBAAA,qBAAqB,EAAE;AAAE,sBAAA,WAAW,EAAX;AAAF,qBADa;AAEpC,oBAAA,WAAW,EAAE,IAFuB;AAGpC,oBAAA,mBAAmB,EAAE;AAHe,mBAFjC;AAAA;AAQG,kBAAA,gBARH,GAQ2B,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,MAAM,CAAC,EAAxB,CAR3B;AASG,kBAAA,OATH,GASa,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,gBAAd,CATb;AAUG,kBAAA,WAVH,GAUiB,gBAAgB,CAAC,KAAjB,CAAuB,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAArC,CAVjB;AAAA;AAAA,yBAWe,iBAAiB,CAAC,OAAD,CAAjB,CAA2B,WAA3B,CAAuC,WAAvC,EAAoD,MAAM,CAAC,EAA3D,CAXf;;AAAA;AAWG,kBAAA,GAXH;;AAYH,sBAAI,WAAW,KAAK,WAApB,EAAiC;AAC/B,oBAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,yBAAlB,EACA,QAAQ,CAAC,WAAT,GAAuB,GADvB;AAED,mBAHD,MAGO,IAAI,WAAW,KAAK,QAApB,EAA8B;AACnC,oBAAA,QAAQ,CAAC,WAAT,GAAuB,GAAvB;AACD,mBAFM,MAEA;AACL,2BAAO,QAAQ,CAAC,qBAAT,CAA+B,WAAtC;AACA,oBAAA,QAAQ,CAAC,qBAAT,CAA+B,KAA/B,GAAuC,4BAAvC;AACD;;AApBE;AAAA;;AAAA;AAAA;AAAA;AAsBH,kBAAA,QAAQ,CAAC,qBAAT,CAA+B,KAA/B,GAAuC,YAAvC;AACA,kBAAA,QAAQ,CAAC,qBAAT,CAA+B,OAA/B,GAAyC,YAAE,QAAF,EAAzC;;AAvBG;AAAA,mDAyBE,QAzBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADoC,KAAzB;AAAA;AADA,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst varint_1 = __importDefault(require(\"varint\"));\nconst multibase_1 = __importDefault(require(\"multibase\"));\nconst secp256k1 = __importStar(require(\"./secp256k1\"));\nconst ed25519 = __importStar(require(\"./ed25519\"));\nconst DID_LD_JSON = 'application/did+ld+json';\nconst DID_JSON = 'application/did+json';\nconst prefixToDriverMap = {\n    0xE7: secp256k1,\n    0xED: ed25519,\n};\nexports.default = {\n    getResolver: () => ({\n        'key': async (did, parsed, r, options) => {\n            const contentType = options.accept || DID_JSON;\n            const response = {\n                didResolutionMetadata: { contentType },\n                didDocument: null,\n                didDocumentMetadata: {}\n            };\n            try {\n                const multicodecPubKey = multibase_1.default.decode(parsed.id);\n                const keyType = varint_1.default.decode(multicodecPubKey);\n                const pubKeyBytes = multicodecPubKey.slice(varint_1.default.decode.bytes);\n                const doc = await prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);\n                if (contentType === DID_LD_JSON) {\n                    doc['@context'] = 'https://w3id.org/did/v1',\n                        response.didDocument = doc;\n                }\n                else if (contentType === DID_JSON) {\n                    response.didDocument = doc;\n                }\n                else {\n                    delete response.didResolutionMetadata.contentType;\n                    response.didResolutionMetadata.error = 'representationNotSupported';\n                }\n            }\n            catch (e) {\n                response.didResolutionMetadata.error = 'invalidDid';\n                response.didResolutionMetadata.message = e.toString();\n            }\n            return response;\n        }\n    })\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}