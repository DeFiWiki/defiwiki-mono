{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamUtils = void 0;\n\nvar cids_1 = __importDefault(require(\"cids\"));\n\nvar lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\n\nvar u8a = __importStar(require(\"uint8arrays\"));\n\nvar stream_1 = require(\"../stream\");\n\nvar streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nvar StreamUtils = /*#__PURE__*/function () {\n  function StreamUtils() {\n    _classCallCheck(this, StreamUtils);\n  }\n\n  _createClass(StreamUtils, null, [{\n    key: \"serializeCommit\",\n    value: function serializeCommit(commit) {\n      var cloned = lodash_clonedeep_1.default(commit);\n\n      if (StreamUtils.isSignedCommitContainer(cloned)) {\n        cloned.jws.link = cloned.jws.link.toString();\n        cloned.linkedBlock = u8a.toString(cloned.linkedBlock, 'base64');\n        return cloned;\n      }\n\n      if (StreamUtils.isSignedCommit(commit)) {\n        cloned.link = cloned.link.toString();\n      }\n\n      if (StreamUtils.isAnchorCommit(commit)) {\n        cloned.proof = cloned.proof.toString();\n      }\n\n      if (cloned.id) {\n        cloned.id = cloned.id.toString();\n      }\n\n      if (cloned.prev) {\n        cloned.prev = cloned.prev.toString();\n      }\n\n      return cloned;\n    }\n  }, {\n    key: \"deserializeCommit\",\n    value: function deserializeCommit(commit) {\n      var cloned = lodash_clonedeep_1.default(commit);\n\n      if (StreamUtils.isSignedCommitContainer(cloned)) {\n        cloned.jws.link = new cids_1.default(cloned.jws.link);\n        cloned.linkedBlock = u8a.fromString(cloned.linkedBlock, 'base64');\n        return cloned;\n      }\n\n      if (StreamUtils.isSignedCommit(cloned)) {\n        cloned.link = new cids_1.default(cloned.link);\n      }\n\n      if (StreamUtils.isAnchorCommit(cloned)) {\n        cloned.proof = new cids_1.default(cloned.proof);\n      }\n\n      if (cloned.id) {\n        cloned.id = new cids_1.default(cloned.id);\n      }\n\n      if (cloned.prev) {\n        cloned.prev = new cids_1.default(cloned.prev);\n      }\n\n      return cloned;\n    }\n  }, {\n    key: \"serializeState\",\n    value: function serializeState(state) {\n      var cloned = lodash_clonedeep_1.default(state);\n      cloned.log = cloned.log.map(function (entry) {\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          cid: entry.cid.toString()\n        });\n      });\n\n      if (cloned.anchorStatus != null) {\n        cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n      }\n\n      if (cloned.anchorScheduledFor != null) {\n        cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toISOString();\n      }\n\n      if (cloned.anchorProof != null) {\n        cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();\n        cloned.anchorProof.root = cloned.anchorProof.root.toString();\n      }\n\n      if (cloned.lastAnchored != null) {\n        cloned.lastAnchored = cloned.lastAnchored.toString();\n      }\n\n      cloned.doctype = streamid_1.StreamType.nameByCode(cloned.type);\n      return cloned;\n    }\n  }, {\n    key: \"deserializeState\",\n    value: function deserializeState(state) {\n      var cloned = lodash_clonedeep_1.default(state);\n\n      if (cloned.doctype) {\n        cloned.type = streamid_1.StreamType.codeByName(cloned.doctype);\n        delete cloned.doctype;\n      }\n\n      cloned.log = cloned.log.map(function (entry) {\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          cid: new cids_1.default(entry.cid)\n        });\n      });\n\n      if (cloned.anchorProof) {\n        cloned.anchorProof.txHash = new cids_1.default(cloned.anchorProof.txHash);\n        cloned.anchorProof.root = new cids_1.default(cloned.anchorProof.root);\n      }\n\n      var showScheduledFor = true;\n\n      if (cloned.anchorStatus) {\n        cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n        showScheduledFor = cloned.anchorStatus !== stream_1.AnchorStatus.FAILED && cloned.anchorStatus !== stream_1.AnchorStatus.ANCHORED;\n      }\n\n      if (cloned.anchorScheduledFor) {\n        if (showScheduledFor) {\n          cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);\n        } else {\n          delete cloned.anchorScheduledFor;\n        }\n      }\n\n      if (cloned.lastAnchored) {\n        cloned.lastAnchored = new cids_1.default(cloned.lastAnchored);\n      }\n\n      return cloned;\n    }\n  }, {\n    key: \"statesEqual\",\n    value: function statesEqual(state1, state2) {\n      return JSON.stringify(StreamUtils.serializeState(state1)) === JSON.stringify(StreamUtils.serializeState(state2));\n    }\n  }, {\n    key: \"isStateSupersetOf\",\n    value: function isStateSupersetOf(state, base) {\n      if (state.log.length < base.log.length) {\n        return false;\n      }\n\n      for (var i in base.log) {\n        if (!state.log[i].cid.equals(base.log[i].cid)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"convertCommitToSignedCommitContainer\",\n    value: function () {\n      var _convertCommitToSignedCommitContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(commit, ipfs) {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!StreamUtils.isSignedCommit(commit)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return ipfs.block.get(commit.link);\n\n              case 3:\n                block = _context.sent;\n                return _context.abrupt(\"return\", {\n                  jws: commit,\n                  linkedBlock: block.data\n                });\n\n              case 5:\n                return _context.abrupt(\"return\", commit);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function convertCommitToSignedCommitContainer(_x, _x2) {\n        return _convertCommitToSignedCommitContainer.apply(this, arguments);\n      }\n\n      return convertCommitToSignedCommitContainer;\n    }()\n  }, {\n    key: \"isSignedCommitContainer\",\n    value: function isSignedCommitContainer(commit) {\n      return commit && commit.jws !== undefined;\n    }\n  }, {\n    key: \"isSignedCommit\",\n    value: function isSignedCommit(commit) {\n      return commit && commit.link !== undefined;\n    }\n  }, {\n    key: \"isAnchorCommit\",\n    value: function isAnchorCommit(commit) {\n      return commit && commit.proof !== undefined;\n    }\n  }]);\n\n  return StreamUtils;\n}();\n\nexports.StreamUtils = StreamUtils;","map":{"version":3,"sources":["../../src/utils/stream-utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamUtils = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nconst u8a = __importStar(require(\"uint8arrays\"));\nconst stream_1 = require(\"../stream\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nclass StreamUtils {\n    static serializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (StreamUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = cloned.jws.link.toString();\n            cloned.linkedBlock = u8a.toString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (StreamUtils.isSignedCommit(commit)) {\n            cloned.link = cloned.link.toString();\n        }\n        if (StreamUtils.isAnchorCommit(commit)) {\n            cloned.proof = cloned.proof.toString();\n        }\n        if (cloned.id) {\n            cloned.id = cloned.id.toString();\n        }\n        if (cloned.prev) {\n            cloned.prev = cloned.prev.toString();\n        }\n        return cloned;\n    }\n    static deserializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (StreamUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = new cids_1.default(cloned.jws.link);\n            cloned.linkedBlock = u8a.fromString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (StreamUtils.isSignedCommit(cloned)) {\n            cloned.link = new cids_1.default(cloned.link);\n        }\n        if (StreamUtils.isAnchorCommit(cloned)) {\n            cloned.proof = new cids_1.default(cloned.proof);\n        }\n        if (cloned.id) {\n            cloned.id = new cids_1.default(cloned.id);\n        }\n        if (cloned.prev) {\n            cloned.prev = new cids_1.default(cloned.prev);\n        }\n        return cloned;\n    }\n    static serializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: entry.cid.toString() }));\n        if (cloned.anchorStatus != null) {\n            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n        }\n        if (cloned.anchorScheduledFor != null) {\n            cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toISOString();\n        }\n        if (cloned.anchorProof != null) {\n            cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();\n            cloned.anchorProof.root = cloned.anchorProof.root.toString();\n        }\n        if (cloned.lastAnchored != null) {\n            cloned.lastAnchored = cloned.lastAnchored.toString();\n        }\n        cloned.doctype = streamid_1.StreamType.nameByCode(cloned.type);\n        return cloned;\n    }\n    static deserializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        if (cloned.doctype) {\n            cloned.type = streamid_1.StreamType.codeByName(cloned.doctype);\n            delete cloned.doctype;\n        }\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: new cids_1.default(entry.cid) }));\n        if (cloned.anchorProof) {\n            cloned.anchorProof.txHash = new cids_1.default(cloned.anchorProof.txHash);\n            cloned.anchorProof.root = new cids_1.default(cloned.anchorProof.root);\n        }\n        let showScheduledFor = true;\n        if (cloned.anchorStatus) {\n            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n            showScheduledFor = cloned.anchorStatus !== stream_1.AnchorStatus.FAILED && cloned.anchorStatus !== stream_1.AnchorStatus.ANCHORED;\n        }\n        if (cloned.anchorScheduledFor) {\n            if (showScheduledFor) {\n                cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);\n            }\n            else {\n                delete cloned.anchorScheduledFor;\n            }\n        }\n        if (cloned.lastAnchored) {\n            cloned.lastAnchored = new cids_1.default(cloned.lastAnchored);\n        }\n        return cloned;\n    }\n    static statesEqual(state1, state2) {\n        return JSON.stringify(StreamUtils.serializeState(state1)) ===\n            JSON.stringify(StreamUtils.serializeState(state2));\n    }\n    static isStateSupersetOf(state, base) {\n        if (state.log.length < base.log.length) {\n            return false;\n        }\n        for (const i in base.log) {\n            if (!state.log[i].cid.equals(base.log[i].cid)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static async convertCommitToSignedCommitContainer(commit, ipfs) {\n        if (StreamUtils.isSignedCommit(commit)) {\n            const block = await ipfs.block.get(commit.link);\n            return {\n                jws: commit,\n                linkedBlock: block.data,\n            };\n        }\n        return commit;\n    }\n    static isSignedCommitContainer(commit) {\n        return commit && commit.jws !== undefined;\n    }\n    static isSignedCommit(commit) {\n        return commit && commit.link !== undefined;\n    }\n    static isAnchorCommit(commit) {\n        return commit && commit.proof !== undefined;\n    }\n}\nexports.StreamUtils = StreamUtils;\n//# sourceMappingURL=stream-utils.js.map"]},"metadata":{},"sourceType":"script"}