{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_CLIENT_CONFIG = void 0;\n\nvar utils_1 = require(\"./utils\");\n\nvar document_1 = require(\"./document\");\n\nvar common_1 = require(\"@ceramicnetwork/common\");\n\nvar stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\n\nvar stream_caip10_link_1 = require(\"@ceramicnetwork/stream-caip10-link\");\n\nvar streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nvar API_PATH = '/api/v0';\nvar CERAMIC_HOST = 'http://localhost:7007';\nexports.DEFAULT_CLIENT_CONFIG = {\n  syncInterval: 5000\n};\nvar DEFAULT_APPLY_COMMIT_OPTS = {\n  anchor: true,\n  publish: true,\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nvar DEFAULT_CREATE_FROM_GENESIS_OPTS = {\n  anchor: true,\n  publish: true,\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nvar DEFAULT_LOAD_OPTS = {\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\n\nvar CeramicClient = /*#__PURE__*/function () {\n  function CeramicClient() {\n    var _this$_streamConstruc;\n\n    var apiHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CERAMIC_HOST;\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CeramicClient);\n\n    this._config = _objectSpread(_objectSpread({}, exports.DEFAULT_CLIENT_CONFIG), config);\n    this._apiUrl = utils_1.combineURLs(apiHost, API_PATH);\n    this._streamCache = new Map();\n    this.context = {\n      api: this\n    };\n    this.pin = this._initPinApi();\n    this._streamConstructors = (_this$_streamConstruc = {}, _defineProperty(_this$_streamConstruc, stream_tile_1.TileDocument.STREAM_TYPE_ID, stream_tile_1.TileDocument), _defineProperty(_this$_streamConstruc, stream_caip10_link_1.Caip10Link.STREAM_TYPE_ID, stream_caip10_link_1.Caip10Link), _this$_streamConstruc);\n  }\n\n  _createClass(CeramicClient, [{\n    key: \"did\",\n    get: function get() {\n      return this.context.did;\n    },\n    set: function set(did) {\n      this.context.did = did;\n    }\n  }, {\n    key: \"_initPinApi\",\n    value: function _initPinApi() {\n      var _this = this;\n\n      return {\n        add: function () {\n          var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(streamId) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return common_1.fetchJson(_this._apiUrl + '/pins' + \"/\".concat(streamId.toString()), {\n                      method: 'post'\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function add(_x) {\n            return _add.apply(this, arguments);\n          }\n\n          return add;\n        }(),\n        rm: function () {\n          var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(streamId) {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return common_1.fetchJson(_this._apiUrl + '/pins' + \"/\".concat(streamId.toString()), {\n                      method: 'delete'\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          function rm(_x2) {\n            return _rm.apply(this, arguments);\n          }\n\n          return rm;\n        }(),\n        ls: function () {\n          var _ls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(streamId) {\n            var url, result, pinnedStreamIds;\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    url = _this._apiUrl + '/pins';\n\n                    if (streamId) {\n                      url += \"/\".concat(streamId.toString());\n                    }\n\n                    _context3.next = 4;\n                    return common_1.fetchJson(url);\n\n                  case 4:\n                    result = _context3.sent;\n                    pinnedStreamIds = result.pinnedStreamIds;\n                    return _context3.abrupt(\"return\", _defineProperty({}, Symbol.asyncIterator, function () {\n                      var index = 0;\n                      return {\n                        next: function next() {\n                          if (index === pinnedStreamIds.length) {\n                            return Promise.resolve({\n                              value: null,\n                              done: true\n                            });\n                          }\n\n                          return Promise.resolve({\n                            value: pinnedStreamIds[index++],\n                            done: false\n                          });\n                        }\n                      };\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          function ls(_x3) {\n            return _ls.apply(this, arguments);\n          }\n\n          return ls;\n        }()\n      };\n    }\n  }, {\n    key: \"createStreamFromGenesis\",\n    value: function () {\n      var _createStreamFromGenesis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(type, genesis) {\n        var opts,\n            stream,\n            found,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_CREATE_FROM_GENESIS_OPTS), opts);\n                _context4.next = 4;\n                return document_1.Document.createFromGenesis(this._apiUrl, type, genesis, opts, this._config.syncInterval);\n\n              case 4:\n                stream = _context4.sent;\n                found = this._streamCache.get(stream.id.toString());\n\n                if (!found) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                if (!common_1.StreamUtils.statesEqual(stream.state, found.state)) found.next(stream.state);\n                return _context4.abrupt(\"return\", this.buildStream(found));\n\n              case 11:\n                this._streamCache.set(stream.id.toString(), stream);\n\n                return _context4.abrupt(\"return\", this.buildStream(stream));\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function createStreamFromGenesis(_x4, _x5) {\n        return _createStreamFromGenesis.apply(this, arguments);\n      }\n\n      return createStreamFromGenesis;\n    }()\n  }, {\n    key: \"loadStream\",\n    value: function () {\n      var _loadStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(streamId) {\n        var opts,\n            streamRef,\n            stream,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                opts = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_LOAD_OPTS), opts);\n                streamRef = streamid_1.StreamRef.from(streamId);\n                stream = this._streamCache.get(streamRef.baseID.toString());\n\n                if (!stream) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                _context5.next = 7;\n                return stream._syncState(streamRef, opts);\n\n              case 7:\n                _context5.next = 13;\n                break;\n\n              case 9:\n                _context5.next = 11;\n                return document_1.Document.load(streamRef, this._apiUrl, this._config.syncInterval, opts);\n\n              case 11:\n                stream = _context5.sent;\n\n                this._streamCache.set(stream.id.toString(), stream);\n\n              case 13:\n                return _context5.abrupt(\"return\", this.buildStream(stream));\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function loadStream(_x6) {\n        return _loadStream.apply(this, arguments);\n      }\n\n      return loadStream;\n    }()\n  }, {\n    key: \"multiQuery\",\n    value: function () {\n      var _multiQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(queries) {\n        var _this2 = this;\n\n        var queriesJSON, results;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                queriesJSON = queries.map(function (q) {\n                  return {\n                    streamId: typeof q.streamId === 'string' ? q.streamId : q.streamId.toString(),\n                    paths: q.paths,\n                    atTime: q.atTime\n                  };\n                });\n                _context6.next = 3;\n                return common_1.fetchJson(this._apiUrl + '/multiqueries', {\n                  method: 'post',\n                  body: {\n                    queries: queriesJSON\n                  }\n                });\n\n              case 3:\n                results = _context6.sent;\n                return _context6.abrupt(\"return\", Object.entries(results).reduce(function (acc, e) {\n                  var _e = _slicedToArray(e, 2),\n                      k = _e[0],\n                      v = _e[1];\n\n                  var state = common_1.StreamUtils.deserializeState(v);\n                  var stream = new document_1.Document(state, _this2._apiUrl, _this2._config.syncInterval);\n                  acc[k] = _this2.buildStream(stream);\n                  return acc;\n                }, {}));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function multiQuery(_x7) {\n        return _multiQuery.apply(this, arguments);\n      }\n\n      return multiQuery;\n    }()\n  }, {\n    key: \"loadStreamCommits\",\n    value: function loadStreamCommits(streamId) {\n      var effectiveStreamId = utils_1.typeStreamID(streamId);\n      return document_1.Document.loadStreamCommits(effectiveStreamId, this._apiUrl);\n    }\n  }, {\n    key: \"applyCommit\",\n    value: function () {\n      var _applyCommit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(streamId, commit) {\n        var opts,\n            effectiveStreamId,\n            document,\n            fromCache,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                opts = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_APPLY_COMMIT_OPTS), opts);\n                effectiveStreamId = utils_1.typeStreamID(streamId);\n                _context7.next = 5;\n                return document_1.Document.applyCommit(this._apiUrl, effectiveStreamId, commit, opts, this._config.syncInterval);\n\n              case 5:\n                document = _context7.sent;\n                fromCache = this._streamCache.get(effectiveStreamId.toString());\n\n                if (!fromCache) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                fromCache.next(document.state);\n                return _context7.abrupt(\"return\", this.buildStream(document));\n\n              case 12:\n                this._streamCache.set(effectiveStreamId.toString(), document);\n\n                return _context7.abrupt(\"return\", this.buildStream(document));\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function applyCommit(_x8, _x9) {\n        return _applyCommit.apply(this, arguments);\n      }\n\n      return applyCommit;\n    }()\n  }, {\n    key: \"addStreamHandler\",\n    value: function addStreamHandler(streamHandler) {\n      this._streamConstructors[streamHandler.name] = streamHandler.stream_constructor;\n    }\n  }, {\n    key: \"findStreamConstructor\",\n    value: function findStreamConstructor(type) {\n      var constructor = this._streamConstructors[type];\n\n      if (constructor) {\n        return constructor;\n      } else {\n        throw new Error(\"Failed to find constructor for stream \".concat(type));\n      }\n    }\n  }, {\n    key: \"buildStream\",\n    value: function buildStream(stream) {\n      var streamConstructor = this.findStreamConstructor(stream.state.type);\n      return new streamConstructor(stream, this.context);\n    }\n  }, {\n    key: \"setDID\",\n    value: function () {\n      var _setDID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(did) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.context.did = did;\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function setDID(_x10) {\n        return _setDID.apply(this, arguments);\n      }\n\n      return setDID;\n    }()\n  }, {\n    key: \"getSupportedChains\",\n    value: function () {\n      var _getSupportedChains = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var _yield$common_1$fetch, supportedChains;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!this._supportedChains) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", this._supportedChains);\n\n              case 2:\n                _context9.next = 4;\n                return common_1.fetchJson(this._apiUrl + '/node/chains');\n\n              case 4:\n                _yield$common_1$fetch = _context9.sent;\n                supportedChains = _yield$common_1$fetch.supportedChains;\n                this._supportedChains = supportedChains;\n                return _context9.abrupt(\"return\", supportedChains);\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getSupportedChains() {\n        return _getSupportedChains.apply(this, arguments);\n      }\n\n      return getSupportedChains;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                Array.from(this._streamCache).map(function (_ref2) {\n                  var _ref3 = _slicedToArray(_ref2, 2),\n                      stream = _ref3[1];\n\n                  stream.complete();\n                });\n\n                this._streamCache.clear();\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return CeramicClient;\n}();\n\nexports.default = CeramicClient;","map":{"version":3,"sources":["../src/ceramic-http-client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_CLIENT_CONFIG = void 0;\nconst utils_1 = require(\"./utils\");\nconst document_1 = require(\"./document\");\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\nconst stream_caip10_link_1 = require(\"@ceramicnetwork/stream-caip10-link\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst API_PATH = '/api/v0';\nconst CERAMIC_HOST = 'http://localhost:7007';\nexports.DEFAULT_CLIENT_CONFIG = {\n    syncInterval: 5000,\n};\nconst DEFAULT_APPLY_COMMIT_OPTS = { anchor: true, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };\nconst DEFAULT_CREATE_FROM_GENESIS_OPTS = { anchor: true, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };\nconst DEFAULT_LOAD_OPTS = { sync: common_1.SyncOptions.PREFER_CACHE };\nclass CeramicClient {\n    constructor(apiHost = CERAMIC_HOST, config = {}) {\n        this._config = { ...exports.DEFAULT_CLIENT_CONFIG, ...config };\n        this._apiUrl = utils_1.combineURLs(apiHost, API_PATH);\n        this._streamCache = new Map();\n        this.context = { api: this };\n        this.pin = this._initPinApi();\n        this._streamConstructors = {\n            [stream_tile_1.TileDocument.STREAM_TYPE_ID]: stream_tile_1.TileDocument,\n            [stream_caip10_link_1.Caip10Link.STREAM_TYPE_ID]: stream_caip10_link_1.Caip10Link\n        };\n    }\n    get did() {\n        return this.context.did;\n    }\n    set did(did) {\n        this.context.did = did;\n    }\n    _initPinApi() {\n        return {\n            add: async (streamId) => {\n                await common_1.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, { method: 'post' });\n            },\n            rm: async (streamId) => {\n                await common_1.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, { method: 'delete' });\n            },\n            ls: async (streamId) => {\n                let url = this._apiUrl + '/pins';\n                if (streamId) {\n                    url += `/${streamId.toString()}`;\n                }\n                const result = await common_1.fetchJson(url);\n                const { pinnedStreamIds } = result;\n                return {\n                    [Symbol.asyncIterator]() {\n                        let index = 0;\n                        return {\n                            next() {\n                                if (index === pinnedStreamIds.length) {\n                                    return Promise.resolve({ value: null, done: true });\n                                }\n                                return Promise.resolve({ value: pinnedStreamIds[index++], done: false });\n                            }\n                        };\n                    }\n                };\n            }\n        };\n    }\n    async createStreamFromGenesis(type, genesis, opts = {}) {\n        opts = { ...DEFAULT_CREATE_FROM_GENESIS_OPTS, ...opts };\n        const stream = await document_1.Document.createFromGenesis(this._apiUrl, type, genesis, opts, this._config.syncInterval);\n        const found = this._streamCache.get(stream.id.toString());\n        if (found) {\n            if (!common_1.StreamUtils.statesEqual(stream.state, found.state))\n                found.next(stream.state);\n            return this.buildStream(found);\n        }\n        else {\n            this._streamCache.set(stream.id.toString(), stream);\n            return this.buildStream(stream);\n        }\n    }\n    async loadStream(streamId, opts = {}) {\n        opts = { ...DEFAULT_LOAD_OPTS, ...opts };\n        const streamRef = streamid_1.StreamRef.from(streamId);\n        let stream = this._streamCache.get(streamRef.baseID.toString());\n        if (stream) {\n            await stream._syncState(streamRef, opts);\n        }\n        else {\n            stream = await document_1.Document.load(streamRef, this._apiUrl, this._config.syncInterval, opts);\n            this._streamCache.set(stream.id.toString(), stream);\n        }\n        return this.buildStream(stream);\n    }\n    async multiQuery(queries) {\n        const queriesJSON = queries.map(q => {\n            return {\n                streamId: typeof q.streamId === 'string' ? q.streamId : q.streamId.toString(),\n                paths: q.paths,\n                atTime: q.atTime\n            };\n        });\n        const results = await common_1.fetchJson(this._apiUrl + '/multiqueries', {\n            method: 'post',\n            body: {\n                queries: queriesJSON\n            }\n        });\n        return Object.entries(results).reduce((acc, e) => {\n            const [k, v] = e;\n            const state = common_1.StreamUtils.deserializeState(v);\n            const stream = new document_1.Document(state, this._apiUrl, this._config.syncInterval);\n            acc[k] = this.buildStream(stream);\n            return acc;\n        }, {});\n    }\n    loadStreamCommits(streamId) {\n        const effectiveStreamId = utils_1.typeStreamID(streamId);\n        return document_1.Document.loadStreamCommits(effectiveStreamId, this._apiUrl);\n    }\n    async applyCommit(streamId, commit, opts = {}) {\n        opts = { ...DEFAULT_APPLY_COMMIT_OPTS, ...opts };\n        const effectiveStreamId = utils_1.typeStreamID(streamId);\n        const document = await document_1.Document.applyCommit(this._apiUrl, effectiveStreamId, commit, opts, this._config.syncInterval);\n        const fromCache = this._streamCache.get(effectiveStreamId.toString());\n        if (fromCache) {\n            fromCache.next(document.state);\n            return this.buildStream(document);\n        }\n        else {\n            this._streamCache.set(effectiveStreamId.toString(), document);\n            return this.buildStream(document);\n        }\n    }\n    addStreamHandler(streamHandler) {\n        this._streamConstructors[streamHandler.name] = streamHandler.stream_constructor;\n    }\n    findStreamConstructor(type) {\n        const constructor = this._streamConstructors[type];\n        if (constructor) {\n            return constructor;\n        }\n        else {\n            throw new Error(`Failed to find constructor for stream ${type}`);\n        }\n    }\n    buildStream(stream) {\n        const streamConstructor = this.findStreamConstructor(stream.state.type);\n        return new streamConstructor(stream, this.context);\n    }\n    async setDID(did) {\n        this.context.did = did;\n    }\n    async getSupportedChains() {\n        if (this._supportedChains) {\n            return this._supportedChains;\n        }\n        const { supportedChains } = await common_1.fetchJson(this._apiUrl + '/node/chains');\n        this._supportedChains = supportedChains;\n        return supportedChains;\n    }\n    async close() {\n        Array.from(this._streamCache).map(([, stream]) => {\n            stream.complete();\n        });\n        this._streamCache.clear();\n    }\n}\nexports.default = CeramicClient;\n//# sourceMappingURL=ceramic-http-client.js.map"]},"metadata":{},"sourceType":"script"}