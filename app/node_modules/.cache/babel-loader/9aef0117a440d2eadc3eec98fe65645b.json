{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _slicedToArray = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _type, _cid, _commit;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommitID = void 0;\n\nvar cids_1 = __importDefault(require(\"cids\"));\n\nvar multibase_1 = __importDefault(require(\"multibase\"));\n\nvar stream_type_1 = require(\"./stream-type\");\n\nvar varint_1 = __importDefault(require(\"varint\"));\n\nvar concat_1 = __importDefault(require(\"uint8arrays/concat\"));\n\nvar to_string_1 = __importDefault(require(\"uint8arrays/to-string\"));\n\nvar typescript_memoize_1 = require(\"typescript-memoize\");\n\nvar constants_1 = require(\"./constants\");\n\nvar reading_bytes_1 = require(\"./reading-bytes\");\n\nvar stream_id_1 = require(\"./stream-id\");\n\nfunction fromBytes(bytes) {\n  var _reading_bytes_1$read = reading_bytes_1.readVarint(bytes),\n      _reading_bytes_1$read2 = _slicedToArray(_reading_bytes_1$read, 2),\n      streamCodec = _reading_bytes_1$read2[0],\n      streamCodecRemainder = _reading_bytes_1$read2[1];\n\n  if (streamCodec !== constants_1.STREAMID_CODEC) throw new Error('fromBytes: invalid streamid, does not include streamid codec');\n\n  var _reading_bytes_1$read3 = reading_bytes_1.readVarint(streamCodecRemainder),\n      _reading_bytes_1$read4 = _slicedToArray(_reading_bytes_1$read3, 2),\n      type = _reading_bytes_1$read4[0],\n      streamtypeRemainder = _reading_bytes_1$read4[1];\n\n  var _reading_bytes_1$read5 = reading_bytes_1.readCid(streamtypeRemainder),\n      _reading_bytes_1$read6 = _slicedToArray(_reading_bytes_1$read5, 2),\n      base = _reading_bytes_1$read6[0],\n      baseRemainder = _reading_bytes_1$read6[1];\n\n  if (baseRemainder.length === 0) {\n    throw new Error(\"No commit information provided\");\n  } else if (baseRemainder.length === 1) {\n    return new CommitID(type, base, baseRemainder[0]);\n  } else {\n    var _reading_bytes_1$read7 = reading_bytes_1.readCid(baseRemainder),\n        _reading_bytes_1$read8 = _slicedToArray(_reading_bytes_1$read7, 1),\n        commit = _reading_bytes_1$read8[0];\n\n    return new CommitID(type, base, commit);\n  }\n}\n\nfunction parseCID(input) {\n  try {\n    return new cids_1.default(input);\n  } catch (_a) {\n    return undefined;\n  }\n}\n\nfunction parseCommit(genesis) {\n  var commit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!commit) return null;\n  var commitCID = parseCID(commit);\n\n  if (commitCID) {\n    if (genesis.equals(commitCID)) {\n      return null;\n    } else {\n      return commitCID;\n    }\n  } else if (String(commit) === '0') {\n    return null;\n  } else {\n    throw new Error('Cannot specify commit as a number except to request commit 0 (the genesis commit)');\n  }\n}\n\nfunction fromString(input) {\n  var protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');\n\n  if (protocolFree.includes('commit')) {\n    var commit = protocolFree.split('?')[1].split('=')[1];\n    var base = protocolFree.split('?')[0];\n    return stream_id_1.StreamID.fromString(base).atCommit(commit);\n  } else {\n    return fromBytes(multibase_1.default.decode(protocolFree));\n  }\n}\n\nvar TAG = Symbol.for('@ceramicnetwork/streamid/CommitID');\n\nvar CommitID = /*#__PURE__*/function () {\n  function CommitID(type, cid) {\n    var commit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, CommitID);\n\n    this._tag = TAG;\n\n    _type.set(this, void 0);\n\n    _cid.set(this, void 0);\n\n    _commit.set(this, void 0);\n\n    if (!type && type !== 0) throw new Error('constructor: type required');\n    if (!cid) throw new Error('constructor: cid required');\n\n    __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);\n\n    __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);\n\n    __classPrivateFieldSet(this, _commit, parseCommit(__classPrivateFieldGet(this, _cid), commit));\n  }\n\n  _createClass(CommitID, [{\n    key: \"baseID\",\n    get: function get() {\n      return new stream_id_1.StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _type);\n    }\n  }, {\n    key: \"typeName\",\n    get: function get() {\n      return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));\n    }\n  }, {\n    key: \"cid\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _cid);\n    }\n  }, {\n    key: \"commit\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _commit) || __classPrivateFieldGet(this, _cid);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      var _a;\n\n      var codec = varint_1.default.encode(constants_1.STREAMID_CODEC);\n      var type = varint_1.default.encode(this.type);\n      var commitBytes = ((_a = __classPrivateFieldGet(this, _commit)) === null || _a === void 0 ? void 0 : _a.bytes) || new Uint8Array([0]);\n      return concat_1.default([codec, type, this.cid.bytes, commitBytes]);\n    }\n  }, {\n    key: \"atCommit\",\n    value: function atCommit(commit) {\n      return new CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.type === other.type && this.cid.equals(other.cid) && this.commit.equals(other.commit);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));\n    }\n  }, {\n    key: \"toUrl\",\n    value: function toUrl() {\n      return \"ceramic://\".concat(this.toString());\n    }\n  }, {\n    key: (_type = new WeakMap(), _cid = new WeakMap(), _commit = new WeakMap(), Symbol.for('nodejs.util.inspect.custom')),\n    value: function value() {\n      return \"CommitID(\".concat(this.toString(), \")\");\n    }\n  }, {\n    key: Symbol.toPrimitive,\n    value: function value() {\n      return this.toString();\n    }\n  }], [{\n    key: \"isInstance\",\n    value: function isInstance(instance) {\n      return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;\n    }\n  }]);\n\n  return CommitID;\n}();\n\nCommitID.fromBytes = fromBytes;\nCommitID.fromString = fromString;\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", stream_id_1.StreamID), __metadata(\"design:paramtypes\", [])], CommitID.prototype, \"baseID\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [])], CommitID.prototype, \"typeName\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", cids_1.default), __metadata(\"design:paramtypes\", [])], CommitID.prototype, \"commit\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Uint8Array), __metadata(\"design:paramtypes\", [])], CommitID.prototype, \"bytes\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", String)], CommitID.prototype, \"toString\", null);\n\n__decorate([typescript_memoize_1.Memoize(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", String)], CommitID.prototype, \"toUrl\", null);\n\nexports.CommitID = CommitID;","map":{"version":3,"sources":["../src/commit-id.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _type, _cid, _commit;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommitID = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst multibase_1 = __importDefault(require(\"multibase\"));\nconst stream_type_1 = require(\"./stream-type\");\nconst varint_1 = __importDefault(require(\"varint\"));\nconst concat_1 = __importDefault(require(\"uint8arrays/concat\"));\nconst to_string_1 = __importDefault(require(\"uint8arrays/to-string\"));\nconst typescript_memoize_1 = require(\"typescript-memoize\");\nconst constants_1 = require(\"./constants\");\nconst reading_bytes_1 = require(\"./reading-bytes\");\nconst stream_id_1 = require(\"./stream-id\");\nfunction fromBytes(bytes) {\n    const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);\n    if (streamCodec !== constants_1.STREAMID_CODEC)\n        throw new Error('fromBytes: invalid streamid, does not include streamid codec');\n    const [type, streamtypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);\n    const [base, baseRemainder] = reading_bytes_1.readCid(streamtypeRemainder);\n    if (baseRemainder.length === 0) {\n        throw new Error(`No commit information provided`);\n    }\n    else if (baseRemainder.length === 1) {\n        return new CommitID(type, base, baseRemainder[0]);\n    }\n    else {\n        const [commit] = reading_bytes_1.readCid(baseRemainder);\n        return new CommitID(type, base, commit);\n    }\n}\nfunction parseCID(input) {\n    try {\n        return new cids_1.default(input);\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\nfunction parseCommit(genesis, commit = null) {\n    if (!commit)\n        return null;\n    const commitCID = parseCID(commit);\n    if (commitCID) {\n        if (genesis.equals(commitCID)) {\n            return null;\n        }\n        else {\n            return commitCID;\n        }\n    }\n    else if (String(commit) === '0') {\n        return null;\n    }\n    else {\n        throw new Error('Cannot specify commit as a number except to request commit 0 (the genesis commit)');\n    }\n}\nfunction fromString(input) {\n    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');\n    if (protocolFree.includes('commit')) {\n        const commit = protocolFree.split('?')[1].split('=')[1];\n        const base = protocolFree.split('?')[0];\n        return stream_id_1.StreamID.fromString(base).atCommit(commit);\n    }\n    else {\n        return fromBytes(multibase_1.default.decode(protocolFree));\n    }\n}\nconst TAG = Symbol.for('@ceramicnetwork/streamid/CommitID');\nclass CommitID {\n    constructor(type, cid, commit = null) {\n        this._tag = TAG;\n        _type.set(this, void 0);\n        _cid.set(this, void 0);\n        _commit.set(this, void 0);\n        if (!type && type !== 0)\n            throw new Error('constructor: type required');\n        if (!cid)\n            throw new Error('constructor: cid required');\n        __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);\n        __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);\n        __classPrivateFieldSet(this, _commit, parseCommit(__classPrivateFieldGet(this, _cid), commit));\n    }\n    static isInstance(instance) {\n        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;\n    }\n    get baseID() {\n        return new stream_id_1.StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));\n    }\n    get type() {\n        return __classPrivateFieldGet(this, _type);\n    }\n    get typeName() {\n        return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));\n    }\n    get cid() {\n        return __classPrivateFieldGet(this, _cid);\n    }\n    get commit() {\n        return __classPrivateFieldGet(this, _commit) || __classPrivateFieldGet(this, _cid);\n    }\n    get bytes() {\n        var _a;\n        const codec = varint_1.default.encode(constants_1.STREAMID_CODEC);\n        const type = varint_1.default.encode(this.type);\n        const commitBytes = ((_a = __classPrivateFieldGet(this, _commit)) === null || _a === void 0 ? void 0 : _a.bytes) || new Uint8Array([0]);\n        return concat_1.default([codec, type, this.cid.bytes, commitBytes]);\n    }\n    atCommit(commit) {\n        return new CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);\n    }\n    equals(other) {\n        return this.type === other.type && this.cid.equals(other.cid) && this.commit.equals(other.commit);\n    }\n    toString() {\n        return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));\n    }\n    toUrl() {\n        return `ceramic://${this.toString()}`;\n    }\n    [(_type = new WeakMap(), _cid = new WeakMap(), _commit = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {\n        return `CommitID(${this.toString()})`;\n    }\n    [Symbol.toPrimitive]() {\n        return this.toString();\n    }\n}\nCommitID.fromBytes = fromBytes;\nCommitID.fromString = fromString;\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", stream_id_1.StreamID),\n    __metadata(\"design:paramtypes\", [])\n], CommitID.prototype, \"baseID\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [])\n], CommitID.prototype, \"typeName\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", cids_1.default),\n    __metadata(\"design:paramtypes\", [])\n], CommitID.prototype, \"commit\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Uint8Array),\n    __metadata(\"design:paramtypes\", [])\n], CommitID.prototype, \"bytes\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], CommitID.prototype, \"toString\", null);\n__decorate([\n    typescript_memoize_1.Memoize(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], CommitID.prototype, \"toUrl\", null);\nexports.CommitID = CommitID;\n//# sourceMappingURL=commit-id.js.map"]},"metadata":{},"sourceType":"script"}