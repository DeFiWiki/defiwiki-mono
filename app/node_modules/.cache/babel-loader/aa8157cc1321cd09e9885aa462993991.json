{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Caip10Link_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Caip10Link = void 0;\n\nvar common_1 = require(\"@ceramicnetwork/common\");\n\nvar streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nvar caip_1 = require(\"caip\");\n\nvar throwReadOnlyError = function throwReadOnlyError() {\n  throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');\n};\n\nvar DEFAULT_CREATE_OPTS = {\n  anchor: false,\n  publish: true,\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\nvar DEFAULT_UPDATE_OPTS = {\n  anchor: true,\n  publish: true\n};\nvar DEFAULT_LOAD_OPTS = {\n  sync: common_1.SyncOptions.PREFER_CACHE\n};\n\nvar Caip10Link = Caip10Link_1 = /*#__PURE__*/function (_common_1$Stream) {\n  _inherits(Caip10Link, _common_1$Stream);\n\n  var _super = _createSuper(Caip10Link);\n\n  function Caip10Link() {\n    _classCallCheck(this, Caip10Link);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Caip10Link, [{\n    key: \"did\",\n    get: function get() {\n      return this._getContent();\n    }\n  }, {\n    key: \"setDid\",\n    value: function () {\n      var _setDid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(did, authProvider) {\n        var opts,\n            didStr,\n            linkProof,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_UPDATE_OPTS), opts);\n                didStr = typeof did == \"string\" ? did : did.id;\n                _context.next = 5;\n                return authProvider.createLink(didStr);\n\n              case 5:\n                linkProof = _context.sent;\n                return _context.abrupt(\"return\", this.setDidProof(linkProof, opts));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setDid(_x, _x2) {\n        return _setDid.apply(this, arguments);\n      }\n\n      return setDid;\n    }()\n  }, {\n    key: \"setDidProof\",\n    value: function () {\n      var _setDidProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proof) {\n        var opts,\n            commit,\n            updated,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                opts = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_UPDATE_OPTS), opts);\n                commit = this.makeCommit(proof);\n                _context2.next = 5;\n                return this.api.applyCommit(this.id, commit, opts);\n\n              case 5:\n                updated = _context2.sent;\n                this.state$.next(updated.state);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setDidProof(_x3) {\n        return _setDidProof.apply(this, arguments);\n      }\n\n      return setDidProof;\n    }()\n  }, {\n    key: \"makeCommit\",\n    value: function makeCommit(proof) {\n      return {\n        data: proof,\n        prev: this.tip,\n        id: this.state$.id.cid\n      };\n    }\n  }, {\n    key: \"makeReadOnly\",\n    value: function makeReadOnly() {\n      this.setDidProof = throwReadOnlyError;\n      this.setDid = throwReadOnlyError;\n    }\n  }], [{\n    key: \"fromAccount\",\n    value: function () {\n      var _fromAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ceramic, accountId) {\n        var opts,\n            normalizedAccountId,\n            genesisCommit,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_CREATE_OPTS), opts);\n                normalizedAccountId = new caip_1.AccountID(accountId);\n                genesisCommit = Caip10Link_1.makeGenesis(normalizedAccountId);\n                return _context3.abrupt(\"return\", Caip10Link_1.fromGenesis(ceramic, genesisCommit, opts));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromAccount(_x4, _x5) {\n        return _fromAccount.apply(this, arguments);\n      }\n\n      return fromAccount;\n    }()\n  }, {\n    key: \"fromGenesis\",\n    value: function () {\n      var _fromGenesis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ceramic, genesisCommit) {\n        var opts,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_CREATE_OPTS), opts);\n                return _context4.abrupt(\"return\", ceramic.createStreamFromGenesis(Caip10Link_1.STREAM_TYPE_ID, genesisCommit, opts));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function fromGenesis(_x6, _x7) {\n        return _fromGenesis.apply(this, arguments);\n      }\n\n      return fromGenesis;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ceramic, streamId) {\n        var opts,\n            streamRef,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                opts = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n                opts = _objectSpread(_objectSpread({}, DEFAULT_LOAD_OPTS), opts);\n                streamRef = streamid_1.StreamRef.from(streamId);\n\n                if (!(streamRef.type != Caip10Link_1.STREAM_TYPE_ID)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error(\"StreamID \".concat(streamRef.toString(), \" does not refer to a '\").concat(Caip10Link_1.STREAM_TYPE_NAME, \"' stream, but to a \").concat(streamRef.typeName));\n\n              case 5:\n                return _context5.abrupt(\"return\", ceramic.loadStream(streamRef, opts));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function load(_x8, _x9) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"makeGenesis\",\n    value: function makeGenesis(accountId) {\n      return {\n        header: {\n          controllers: [accountId.toString()],\n          family: \"caip10-\".concat(accountId.chainId.toString())\n        }\n      };\n    }\n  }]);\n\n  return Caip10Link;\n}(common_1.Stream);\n\nCaip10Link.STREAM_TYPE_NAME = 'caip10-link';\nCaip10Link.STREAM_TYPE_ID = 1;\nCaip10Link = Caip10Link_1 = __decorate([common_1.StreamStatic()], Caip10Link);\nexports.Caip10Link = Caip10Link;","map":{"version":3,"sources":["../src/caip10-link.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Caip10Link_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Caip10Link = void 0;\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst caip_1 = require(\"caip\");\nconst throwReadOnlyError = () => {\n    throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');\n};\nconst DEFAULT_CREATE_OPTS = { anchor: false, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };\nconst DEFAULT_UPDATE_OPTS = { anchor: true, publish: true };\nconst DEFAULT_LOAD_OPTS = { sync: common_1.SyncOptions.PREFER_CACHE };\nlet Caip10Link = Caip10Link_1 = class Caip10Link extends common_1.Stream {\n    get did() {\n        return this._getContent();\n    }\n    static async fromAccount(ceramic, accountId, opts = {}) {\n        opts = { ...DEFAULT_CREATE_OPTS, ...opts };\n        const normalizedAccountId = new caip_1.AccountID(accountId);\n        const genesisCommit = Caip10Link_1.makeGenesis(normalizedAccountId);\n        return Caip10Link_1.fromGenesis(ceramic, genesisCommit, opts);\n    }\n    static async fromGenesis(ceramic, genesisCommit, opts = {}) {\n        opts = { ...DEFAULT_CREATE_OPTS, ...opts };\n        return ceramic.createStreamFromGenesis(Caip10Link_1.STREAM_TYPE_ID, genesisCommit, opts);\n    }\n    async setDid(did, authProvider, opts = {}) {\n        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };\n        const didStr = typeof did == \"string\" ? did : did.id;\n        const linkProof = await authProvider.createLink(didStr);\n        return this.setDidProof(linkProof, opts);\n    }\n    async setDidProof(proof, opts = {}) {\n        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };\n        const commit = this.makeCommit(proof);\n        const updated = await this.api.applyCommit(this.id, commit, opts);\n        this.state$.next(updated.state);\n    }\n    static async load(ceramic, streamId, opts = {}) {\n        opts = { ...DEFAULT_LOAD_OPTS, ...opts };\n        const streamRef = streamid_1.StreamRef.from(streamId);\n        if (streamRef.type != Caip10Link_1.STREAM_TYPE_ID) {\n            throw new Error(`StreamID ${streamRef.toString()} does not refer to a '${Caip10Link_1.STREAM_TYPE_NAME}' stream, but to a ${streamRef.typeName}`);\n        }\n        return ceramic.loadStream(streamRef, opts);\n    }\n    static makeGenesis(accountId) {\n        return { header: { controllers: [accountId.toString()],\n                family: `caip10-${accountId.chainId.toString()}` } };\n    }\n    makeCommit(proof) {\n        return { data: proof, prev: this.tip, id: this.state$.id.cid };\n    }\n    makeReadOnly() {\n        this.setDidProof = throwReadOnlyError;\n        this.setDid = throwReadOnlyError;\n    }\n};\nCaip10Link.STREAM_TYPE_NAME = 'caip10-link';\nCaip10Link.STREAM_TYPE_ID = 1;\nCaip10Link = Caip10Link_1 = __decorate([\n    common_1.StreamStatic()\n], Caip10Link);\nexports.Caip10Link = Caip10Link;\n//# sourceMappingURL=caip10-link.js.map"]},"metadata":{},"sourceType":"script"}