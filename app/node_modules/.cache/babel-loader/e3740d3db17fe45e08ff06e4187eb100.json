{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/not-sync/git2/defiwiki-mono/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Document = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar common_1 = require(\"@ceramicnetwork/common\");\n\nvar streamid_1 = require(\"@ceramicnetwork/streamid\");\n\nvar query_string_1 = __importDefault(require(\"query-string\"));\n\nvar Document = /*#__PURE__*/function (_rxjs_1$Observable) {\n  _inherits(Document, _rxjs_1$Observable);\n\n  var _super = _createSuper(Document);\n\n  function Document(initial, _apiUrl, syncInterval) {\n    var _this;\n\n    _classCallCheck(this, Document);\n\n    _this = _super.call(this, function (subscriber) {\n      var isFirstObserver = _this.state$.observers.length === 0;\n\n      if (isFirstObserver) {\n        _this.periodicSubscription = rxjs_1.timer(0, syncInterval).pipe(operators_1.throttle(function () {\n          return _this._syncState(_this.id, {\n            sync: common_1.SyncOptions.PREFER_CACHE\n          });\n        })).subscribe();\n      }\n\n      _this.state$.subscribe(subscriber).add(function () {\n        var _a;\n\n        var isNoObserversLeft = _this.state$.observers.length === 0;\n\n        if (isNoObserversLeft) {\n          (_a = _this.periodicSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        }\n      });\n    });\n    _this._apiUrl = _apiUrl;\n    _this.state$ = new common_1.StreamStateSubject(initial);\n    return _this;\n  }\n\n  _createClass(Document, [{\n    key: \"value\",\n    get: function get() {\n      return this.state$.value;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.state$.value;\n    }\n  }, {\n    key: \"next\",\n    value: function next(state) {\n      this.state$.next(state);\n    }\n  }, {\n    key: \"_syncState\",\n    value: function () {\n      var _syncState2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(streamId, opts) {\n        var state;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Document._load(streamId, this._apiUrl, opts);\n\n              case 2:\n                state = _context.sent;\n                this.state$.next(common_1.StreamUtils.deserializeState(state));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _syncState(_x, _x2) {\n        return _syncState2.apply(this, arguments);\n      }\n\n      return _syncState;\n    }()\n  }, {\n    key: \"id\",\n    get: function get() {\n      return new streamid_1.StreamID(this.state$.value.type, this.state$.value.log[0].cid);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.state$.complete();\n    }\n  }], [{\n    key: \"createFromGenesis\",\n    value: function () {\n      var _createFromGenesis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(apiUrl, type, genesis, opts, syncInterval) {\n        var _yield$common_1$fetch, state;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return common_1.fetchJson(apiUrl + '/streams', {\n                  method: 'post',\n                  body: {\n                    type: type,\n                    genesis: common_1.StreamUtils.serializeCommit(genesis),\n                    opts: opts\n                  }\n                });\n\n              case 2:\n                _yield$common_1$fetch = _context2.sent;\n                state = _yield$common_1$fetch.state;\n                return _context2.abrupt(\"return\", new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createFromGenesis(_x3, _x4, _x5, _x6, _x7) {\n        return _createFromGenesis.apply(this, arguments);\n      }\n\n      return createFromGenesis;\n    }()\n  }, {\n    key: \"applyCommit\",\n    value: function () {\n      var _applyCommit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(apiUrl, streamId, commit, opts, syncInterval) {\n        var _yield$common_1$fetch2, state;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return common_1.fetchJson(apiUrl + '/commits', {\n                  method: 'post',\n                  body: {\n                    streamId: streamId.toString(),\n                    commit: common_1.StreamUtils.serializeCommit(commit),\n                    opts: opts\n                  }\n                });\n\n              case 2:\n                _yield$common_1$fetch2 = _context3.sent;\n                state = _yield$common_1$fetch2.state;\n                return _context3.abrupt(\"return\", new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function applyCommit(_x8, _x9, _x10, _x11, _x12) {\n        return _applyCommit.apply(this, arguments);\n      }\n\n      return applyCommit;\n    }()\n  }, {\n    key: \"_load\",\n    value: function () {\n      var _load2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(streamId, apiUrl, opts) {\n        var url, _yield$common_1$fetch3, state;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                url = apiUrl + '/streams/' + streamId.toString() + '?' + query_string_1.default.stringify(opts);\n                _context4.next = 3;\n                return common_1.fetchJson(url);\n\n              case 3:\n                _yield$common_1$fetch3 = _context4.sent;\n                state = _yield$common_1$fetch3.state;\n                return _context4.abrupt(\"return\", state);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function _load(_x13, _x14, _x15) {\n        return _load2.apply(this, arguments);\n      }\n\n      return _load;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(streamId, apiUrl, syncInterval, opts) {\n        var state;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Document._load(streamId, apiUrl, opts);\n\n              case 2:\n                state = _context5.sent;\n                return _context5.abrupt(\"return\", new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function load(_x16, _x17, _x18, _x19) {\n        return _load3.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"loadStreamCommits\",\n    value: function () {\n      var _loadStreamCommits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(streamId, apiUrl) {\n        var _yield$common_1$fetch4, commits;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return common_1.fetchJson(\"\".concat(apiUrl, \"/commits/\").concat(streamId));\n\n              case 2:\n                _yield$common_1$fetch4 = _context6.sent;\n                commits = _yield$common_1$fetch4.commits;\n                return _context6.abrupt(\"return\", commits.map(function (r) {\n                  return {\n                    cid: r.cid,\n                    value: common_1.StreamUtils.deserializeCommit(r.value)\n                  };\n                }));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function loadStreamCommits(_x20, _x21) {\n        return _loadStreamCommits.apply(this, arguments);\n      }\n\n      return loadStreamCommits;\n    }()\n  }]);\n\n  return Document;\n}(rxjs_1.Observable);\n\nexports.Document = Document;","map":{"version":3,"sources":["../src/document.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Document = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nconst query_string_1 = __importDefault(require(\"query-string\"));\nclass Document extends rxjs_1.Observable {\n    constructor(initial, _apiUrl, syncInterval) {\n        super(subscriber => {\n            const isFirstObserver = this.state$.observers.length === 0;\n            if (isFirstObserver) {\n                this.periodicSubscription = rxjs_1.timer(0, syncInterval).pipe(operators_1.throttle(() => this._syncState(this.id, { sync: common_1.SyncOptions.PREFER_CACHE }))).subscribe();\n            }\n            this.state$.subscribe(subscriber).add(() => {\n                var _a;\n                const isNoObserversLeft = this.state$.observers.length === 0;\n                if (isNoObserversLeft) {\n                    (_a = this.periodicSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n                }\n            });\n        });\n        this._apiUrl = _apiUrl;\n        this.state$ = new common_1.StreamStateSubject(initial);\n    }\n    get value() {\n        return this.state$.value;\n    }\n    get state() {\n        return this.state$.value;\n    }\n    next(state) {\n        this.state$.next(state);\n    }\n    async _syncState(streamId, opts) {\n        const state = await Document._load(streamId, this._apiUrl, opts);\n        this.state$.next(common_1.StreamUtils.deserializeState(state));\n    }\n    get id() {\n        return new streamid_1.StreamID(this.state$.value.type, this.state$.value.log[0].cid);\n    }\n    static async createFromGenesis(apiUrl, type, genesis, opts, syncInterval) {\n        const { state } = await common_1.fetchJson(apiUrl + '/streams', {\n            method: 'post',\n            body: {\n                type,\n                genesis: common_1.StreamUtils.serializeCommit(genesis),\n                opts,\n            }\n        });\n        return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n    }\n    static async applyCommit(apiUrl, streamId, commit, opts, syncInterval) {\n        const { state } = await common_1.fetchJson(apiUrl + '/commits', {\n            method: 'post',\n            body: {\n                streamId: streamId.toString(),\n                commit: common_1.StreamUtils.serializeCommit(commit),\n                opts,\n            }\n        });\n        return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n    }\n    static async _load(streamId, apiUrl, opts) {\n        const url = apiUrl + '/streams/' + streamId.toString() + '?' + query_string_1.default.stringify(opts);\n        const { state } = await common_1.fetchJson(url);\n        return state;\n    }\n    static async load(streamId, apiUrl, syncInterval, opts) {\n        const state = await Document._load(streamId, apiUrl, opts);\n        return new Document(common_1.StreamUtils.deserializeState(state), apiUrl, syncInterval);\n    }\n    static async loadStreamCommits(streamId, apiUrl) {\n        const { commits } = await common_1.fetchJson(`${apiUrl}/commits/${streamId}`);\n        return commits.map((r) => {\n            return {\n                cid: r.cid, value: common_1.StreamUtils.deserializeCommit(r.value)\n            };\n        });\n    }\n    complete() {\n        this.state$.complete();\n    }\n}\nexports.Document = Document;\n//# sourceMappingURL=document.js.map"]},"metadata":{},"sourceType":"script"}